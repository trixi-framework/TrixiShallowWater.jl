var documenterSearchIndex = {"docs":
[{"location":"tutorials/elixir_shallowwater_dam_break_triangular/#Dam-break-over-triangular-bottom-topography","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topography","text":"","category":"section"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"In this tutorial we will use the shallow water equations to simulate a dam break over triangular bottom topography with wetting and drying and compare the results to experimental data. The test case is based on a dam break experiment and has been discussed in:","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"S. Gu et al. (2017) SWE-SPHysics Simulation of Dam Break Flows at South-Gate Gorges Reservoir DOI: 10.3390/w9060387\nJ.G. Zhou, D.M. Causon, C.G. Mingham and D.M. Ingram (2004) Numerical Prediction of Dam-Break Flows in General Geometries with Complex Bed Topography DOI: 10.1061/(ASCE)0733-9429(2004)130:4(332)","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"The tutorial will cover:","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"Set up a SWE solver for wet/dry transitions\nCreate custom initial conditions and source terms\nSave solution data at gauge points\nVisualization with Makie.jl","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/#Load-required-packages","page":"Dam break over triangular bottom topograhy","title":"Load required packages","text":"","category":"section"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"Before we start, we need to load the required packages. Besides TrixiShallowWater.jl, we require Trixi.jl for the spatial discretization and OrdinaryDiffEqSSPRK.jl for time integration. In addition to that CairoMakie.jl is used for visualization and CSV.jl and DataFrames.jl will be used to load the experimental data.","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"Standard packages","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"using OrdinaryDiffEqSSPRK\nusing Trixi\nusing TrixiShallowWater","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"Packages for visualization","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"using CairoMakie\nusing DataFrames\nusing CSV","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/#Prepare-and-run-the-problem-setup","page":"Dam break over triangular bottom topograhy","title":"Prepare and run the problem setup","text":"","category":"section"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"In the first step we will set up the equation system. In this example we want to solve the one-dimensional shallow water equations, so we will use the ShallowWaterEquations1D and specify the gravitational acceleration to gravity = 9.812. In contrast to the ShallowWaterEquations1D type, this equation type contains additional parameters and methods that are needed to handle wetting and drying.","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"equations = ShallowWaterEquations1D(gravity = 9.812)","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"We then create a function to supply the initial condition for the simulation. Note, in the last step of this function the water height needs to be shifted by a small value to avoid division by zero.","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"function initial_condition_dam_break_triangular(x, t,\n                                                equations::ShallowWaterEquations1D)\n    b = 0.0  # Bottom topography\n    h = 0.0  # Water height\n    v = 0.0  # Velocity\n\n    if x[1] <= 15.5\n        h = 0.75  # Water height in the left reservoir\n    elseif 25.5 < x[1] && x[1] <= 28.5\n        b = (x[1] - 25.5) * 0.4 / 3.0  # Rising slope of the triangular bottom\n    elseif x[1] > 28.5 && x[1] < 31.5\n        b = 0.4 - (x[1] - 28.5) * 0.4 / 3.0  # Falling slope of the triangular bottom\n    end\n\n    H = h + b  # Total water height\n    if x[1] > 28.5\n        H = max(H, 0.15)  # Water height in the right reservoir\n    end\n\n    # It is mandatory to shift the water level at dry areas to make sure the water height h\n    # stays positive. The system would not be stable for h set to a hard zero due to division by h in\n    # the computation of velocity, e.g., (h v) / h. Therefore, a small dry state threshold\n    # with a default value of 5*eps() ≈ 1e-13 in double precision, is set in the constructor above\n    # for the ShallowWaterEquations and added to the initial condition if h = 0.\n    # This default value can be changed within the constructor call depending on the simulation setup.\n    H = max(H, b + equations.threshold_limiter)\n    return prim2cons(SVector(H, v, b), equations)\nend\n\ninitial_condition = initial_condition_dam_break_triangular;\nnothing #hide","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"As we want to compare the results to experimental data, we also need to account for bottom friction. For this we create a new source term, which adds a Manning friction term to the momentum equation.","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"@inline function source_term_manning_friction(u, x, t,\n                                              equations::ShallowWaterEquations1D)\n    h, hv, _ = u\n\n    n = 0.0125  # friction coefficient\n    h = (h^2 + max(h^2, 1e-8)) / (2 * h) # desingularization procedure\n\n    return SVector(0.0, -equations.gravity * n^2 * h^(-7 / 3) * abs(hv) * hv, 0.0)\nend","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"Now we can set up the DG approximation space. We use the discontinuous Galerkin spectral element method (DGSEM), with a volume integral in flux differencing formulation. For this, we first need to specify fluxes for both volume and surface integrals. Since the system contains nonconservative terms the fluxes are provided in form of a tuple flux = (conservative flux, nonconservative_flux). To ensure well-balancedness and positivity a reconstruction procedure is applied for the surface fluxes and a shock-capturing scheme with modified indicator function is used to compute the volume integrals.","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"volume_flux = (flux_wintermeyer_etal, flux_nonconservative_wintermeyer_etal)\nsurface_flux = (FluxHydrostaticReconstruction(flux_hll_chen_noelle,\n                                              hydrostatic_reconstruction_chen_noelle),\n                flux_nonconservative_chen_noelle)\n\nbasis = LobattoLegendreBasis(4)\n\nindicator_sc = IndicatorHennemannGassnerShallowWater(equations, basis,\n                                                     alpha_max = 0.5,\n                                                     alpha_min = 0.001,\n                                                     alpha_smooth = true,\n                                                     variable = waterheight)\nvolume_integral = VolumeIntegralShockCapturingHG(indicator_sc;\n                                                 volume_flux_dg = volume_flux,\n                                                 volume_flux_fv = surface_flux)\n\nsolver = DGSEM(basis, surface_flux, volume_integral)","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"Then the mesh is created using the TreeMesh type. The computational domain spans from coordinates_min to coordinates_max and is initialized with 2^8 = 256 elements on a non-periodic domain.","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"coordinates_min = 0.0\ncoordinates_max = 38.0\n\nmesh = TreeMesh(coordinates_min, coordinates_max,\n                initial_refinement_level = 8,\n                n_cells_max = 10_000,\n                periodicity = false)","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"The semi-discretization object combines the mesh, equations, initial condition, solver, boundary conditions, and source terms into a single object. This object represents the spatial discretization of the problem and is complemented with the required time interval to define an ODE problem for time integration.","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"semi = SemidiscretizationHyperbolic(mesh, equations, initial_condition, solver,\n                                    boundary_conditions = boundary_condition_slip_wall,\n                                    source_terms = source_term_manning_friction)\ntspan = (0.0, 40.0)\node = semidiscretize(semi, tspan);\nnothing #hide","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"Callbacks are used to monitor the simulation, save results, and control the time step. Below, we define several callbacks for different purposes.","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/#AnalysisCallback","page":"Dam break over triangular bottom topograhy","title":"AnalysisCallback","text":"","category":"section"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"The AnalysisCallback is used to analyze the solution at regular intervals. Extra analysis quantities such as conservation errors can be added to the callback.","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"analysis_callback = AnalysisCallback(semi, interval = 5000,\n                                     extra_analysis_errors = (:conservation_error,))","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/#Time-Series-Callback","page":"Dam break over triangular bottom topograhy","title":"Time Series Callback","text":"","category":"section"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"The TimeSeriesCallback is used to extract time series data at a specific gauge location.","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"time_series = TimeSeriesCallback(semi, [(19.5)])","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/#Stepsize-Callback","page":"Dam break over triangular bottom topograhy","title":"Stepsize Callback","text":"","category":"section"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"The StepsizeCallback calculates the time step based on a CFL condition.","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"stepsize_callback = StepsizeCallback(cfl = 0.5)","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"All the defined callbacks are then combined into a single CallbackSet.","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"callbacks = CallbackSet(analysis_callback,\n                        time_series,\n                        stepsize_callback);\nnothing #hide","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"Finally, we can go ahead an solve the ODE problem using a strong stability-preserving Runge-Kutta (SSPRK) method. The PositivityPreservingLimiterShallowWater is used as a stage limiter to ensure positivity of the water height during the simulation. The SSPRK43 integrator supports adaptive timestepping, but since we use a CFL-based time step we set (adaptive = false). For visualization purposes, we also use the saveat option to the solution at specific times.","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"stage_limiter! = PositivityPreservingLimiterShallowWater(variables = (waterheight,))\n\nsol = solve(ode, SSPRK43(stage_limiter!); dt = 1.0,\n            ode_default_options()..., callback = callbacks, adaptive = false,\n            saveat = (0, 3.5, 40));\nnothing #hide","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/#Visualization","page":"Dam break over triangular bottom topograhy","title":"Visualization","text":"","category":"section"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"After solving the ODE problem, we want to visualize the results. The first plot shows the water height over the spatial domain at different times. The second plot compares the simulation results to experimental data at a gauge point G4 located at x=195textm.","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/#Spatial-plot","page":"Dam break over triangular bottom topograhy","title":"Spatial plot","text":"","category":"section"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"We first extract the solution data for each saved time using PlotData1D. This allows us to reformat the solution for visualization purposes.","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"pd_list = [PlotData1D(sol.u[i], semi, reinterpolate = false) for i in 1:length(sol.u)];\nnothing #hide","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"Create a figure and axis for the spatial plot","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"f = Figure(size = (550, 550 / 2.5))\nax = Axis(f[1, 1], xlabel = \"x / m\", ylabel = \"waterheight / m\", limits = (0, 38, 0.0, 1.2));\nnothing #hide","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"Plot the water height at different time points","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"for (i, pd) in enumerate(pd_list)\n    lines!(ax, pd.x, pd.data[:, 1], label = \"t = $(sol.t[i])s\")\nend","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"Add the bottom topography to the plot","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"lines!(ax, pd_list[1].x, pd_list[1].data[:, 3], color = :black, linestyle = :solid)\nband!(ax, pd_list[1].x, 0.0, pd_list[1].data[:, 3], color = :gray95);  # Set color for bottom topography\nnothing #hide","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"Add a legend to the plot","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"axislegend(ax, orientation = :horizontal)\nf","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/#Time-series-plot","page":"Dam break over triangular bottom topograhy","title":"Time series plot","text":"","category":"section"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"To validate the simulation, we now want to compare the results to experimental data. Therefore, We first download the experimental data for the first gauge location G4 from an external source and load it into a DataFrame format.","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"G4_data = Trixi.download(\"https://raw.githubusercontent.com/patrickersing/paper-2024-es_hydrostatic_reconstruction/refs/heads/main/code/DamBreakTriangularBottom/Reference/G4_Experimental.csv\",\n                         joinpath(@__DIR__, \"G4_Experimental.csv\"))\npd_G4 = CSV.read(G4_data, DataFrame);\nnothing #hide","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"The simulation data at the gauge location has been saved to the time_series variable. To reformat the data for visualization, we use the PlotData1D function.","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"pd = PlotData1D(time_series, 1);\nnothing #hide","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"Create a figure and axis for the comparison plot","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"f = Figure(size = (550, 550 / 2.5))\nax = Axis(f[1, 1], xlabel = \"time / s\", ylabel = \"waterheight / m\",\n          limits = (0, 40, 0.0, 0.8));\nnothing #hide","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"Add experimental and simulation data to the plot","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"scatter!(ax, pd_G4.X, pd_G4.Y, color = :orange, strokewidth = 1,\n         strokecolor = (:black, 0.5), label = \"Experiment\")\nlines!(ax, pd.x, pd.data[:, 1], label = \"Simulation\");\nnothing #hide","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"Add a legend to the plot","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"axislegend(ax, orientation = :horizontal)\nf","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"","category":"page"},{"location":"tutorials/elixir_shallowwater_dam_break_triangular/","page":"Dam break over triangular bottom topograhy","title":"Dam break over triangular bottom topograhy","text":"This page was generated using Literate.jl.","category":"page"},{"location":"contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"TrixiShallowWater.jl is an open-source project and we are very happy to accept contributions from the community. Please feel free to open issues or submit patches (preferably as pull requests) any time. For planned larger contributions, it is often beneficial to get in contact with one of the principal developers first (see Authors).","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"TrixiShallowWater.jl and its contributions are licensed under the MIT license (see License). As a contributor, you certify that all your contributions are in conformance with the Developer Certificate of Origin (Version 1.1), which is reproduced below.","category":"page"},{"location":"contributing/#Developer-Certificate-of-Origin-(Version-1.1)","page":"Contributing","title":"Developer Certificate of Origin (Version 1.1)","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"The following text was taken from https://developercertificate.org:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Developer Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.","category":"page"},{"location":"development/#Development","page":"Development","title":"Development","text":"","category":"section"},{"location":"development/","page":"Development","title":"Development","text":"This page contains some helpful information for the development of TrixiShallowWater.jl. Further information about helpful tools for package development in Julia can be found on the development page of the Trixi.jl docs.","category":"page"},{"location":"development/#Releasing-a-new-version-of-TrixiShallowWater","page":"Development","title":"Releasing a new version of TrixiShallowWater","text":"","category":"section"},{"location":"development/","page":"Development","title":"Development","text":"Check whether everything is okay, tests pass etc.\nSet the new version number in Project.toml according to the Julian version of semver. Commit and push.\nComment @JuliaRegistrator register on the commit setting the version number.\nJuliaRegistrator will create a PR with the new version in the General registry. Wait for it to be merged.\nIncrement the version number in Project.toml again with suffix -DEV. For example, if you have released version v0.2.0, use v0.2.1-DEV as new version number.","category":"page"},{"location":"development/#Preview-the-documentation","page":"Development","title":"Preview the documentation","text":"","category":"section"},{"location":"development/","page":"Development","title":"Development","text":"You can build the documentation of TrixiShallowWater.jl locally by running","category":"page"},{"location":"development/","page":"Development","title":"Development","text":"julia --project=docs -e 'using Pkg; Pkg.develop(PackageSpec(path=pwd())); Pkg.instantiate()'\njulia --project=docs --color=yes docs/make.jl","category":"page"},{"location":"development/","page":"Development","title":"Development","text":"from the TrixiShallowWater.jl main directory. Then, you can look at the html files generated in docs/build. For PRs triggered from branches inside the TrixiShallowWater.jl main repository previews of the new documentation are generated at https://trixi-framework.github.io/TrixiShallowWater.jl/previews/PRXXX, where XXX is the number of the PR. Note, this does not work for PRs from forks for security reasons (since anyone could otherwise push arbitrary stuff, including malicious code).","category":"page"},{"location":"development/#Developing-with-a-local-Trixi.jl-version","page":"Development","title":"Developing with a local Trixi.jl version","text":"","category":"section"},{"location":"development/","page":"Development","title":"Development","text":"TrixiShallowWater.jl has Trixi.jl as a dependency and uses Trixi.jl's implementation. When developing TrixiShallowWater.jl, one may want to change functions in Trixi.jl to allow them to be reused in TrixiShallowWater.jl. To use a locally modified Trixi.jl clone instead of a Trixi.jl release, one can tell Pkg to use the local source code of Trixi.jl instead of a registered version by running","category":"page"},{"location":"development/","page":"Development","title":"Development","text":"using Pkg\nPkg.develop(PackageSpec(path=\"path/to/Trixi.jl\"))","category":"page"},{"location":"development/","page":"Development","title":"Development","text":"To switch back from a local version to a Trixi.jl release run","category":"page"},{"location":"development/","page":"Development","title":"Development","text":"Pkg.free(\"Trixi\")","category":"page"},{"location":"installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"If you have not yet installed Julia, please follow the instructions for your operating system. TrixiShallowWater.jl works with Julia v1.10 and newer. We recommend using the latest stable release of Julia.","category":"page"},{"location":"installation/#For-users","page":"Installation","title":"For users","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"TrixiShallowWater.jl and its related tools are registered Julia packages. Hence, you can install TrixiShallowWater.jl, the numerical solver framework Trixi.jl, visualization tools Trixi2Vtk.jl, and Plots.jl as well as relevant time integration sub-packages of OrdinaryDiffEq.jl, by executing the following commands in the Julia REPL:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"julia> using Pkg\n\njulia> Pkg.add([\"TrixiShallowWater\", \"Trixi\", \"Trixi2Vtk\", \"Plots\",\n                \"OrdinaryDiffEqLowStorageRK\", \"OrdinaryDiffEqSSPRK\"])","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"You can copy and paste all commands to the REPL including the leading julia> prompts - they will automatically be stripped away by Julia. The package OrdinaryDiffEq.jl and its sub-packages provide time integration schemes used by TrixiShallowWater.jl, while Plots.jl can be used to directly visualize TrixiShallowWater.jl's results from the REPL.","category":"page"},{"location":"installation/#For-developers","page":"Installation","title":"For developers","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"If you plan on editing TrixiShallowWater.jl itself, you can download TrixiShallowWater.jl locally and use the code from the cloned directory:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"git clone git@github.com:trixi-framework/TrixiShallowWater.jl.git\ncd TrixiShallowWater.jl\nmkdir run\ncd run\njulia --project=. -e 'using Pkg; Pkg.develop(PackageSpec(path=\"..\"))' # Install local TrixiShallowWater.jl clone\njulia --project=. -e 'using Pkg; Pkg.add([\"Trixi\", \"OrdinaryDiffEqLowStorageRK\", \"OrdinaryDiffEqSSPRK\", \"Trixi2Vtk\", \"Plots\"])' # Install additional packages","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Note that the postprocessing tools Trixi2Vtk.jl and Plots.jl are optional and can be omitted.","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"If you installed TrixiShallowWater.jl this way, you always have to start Julia with the --project flag set to your run directory, e.g.,","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"julia --project=.","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"if already inside the run directory. Further details, of how to develop TrixiShallowWater.jl together with a local clone Trixi.jl, can be found in the Development section of the documentation.","category":"page"},{"location":"home/#TrixiShallowWater.jl","page":"TrixiShallowWater.jl","title":"TrixiShallowWater.jl","text":"","category":"section"},{"location":"home/","page":"TrixiShallowWater.jl","title":"TrixiShallowWater.jl","text":"(Image: Stable) (Image: Dev) (Image: Slack) (Image: Build Status) (Image: Coverage) (Image: Coverage) (Image: License: MIT) (Image: DOI)","category":"page"},{"location":"home/","page":"TrixiShallowWater.jl","title":"TrixiShallowWater.jl","text":"<p align=\"center\">\n  <img width=\"300px\" src=\"https://trixi-framework.github.io/assets/logo_sw.png\">\n</p>","category":"page"},{"location":"home/","page":"TrixiShallowWater.jl","title":"TrixiShallowWater.jl","text":"TrixiShallowWater.jl is a numerical simulation package focused on solving shallow water equations with the discontinuous Galerkin method and written in Julia. The package builds on the numerical simulation framework for conservation laws Trixi.jl and provides several specialized models and features specific for shallow water applications. Below is a short summary of the available features:","category":"page"},{"location":"home/","page":"TrixiShallowWater.jl","title":"TrixiShallowWater.jl","text":"1D and 2D simulations on line/quad meshes\nCartesian and curvilinear meshes\nConforming and non-conforming meshes\nHierarchical quadtree meshes with adaptive mesh refinement\nHigh-order accuracy in space and time\nEntropy-stable discontinuous Galerkin methods based on flux differencing\nEntropy-stable shock capturing\nPositivity-preserving limiting\nCompatible with the SciML ecosystem for ordinary differential equations\nCFL-based and error-based time step control\nShallow water capabilities\nWetting and drying\nMulti-layer flows\nSediment transport via an Exner model","category":"page"},{"location":"home/#Installation","page":"TrixiShallowWater.jl","title":"Installation","text":"","category":"section"},{"location":"home/","page":"TrixiShallowWater.jl","title":"TrixiShallowWater.jl","text":"If you have not yet installed Julia, please follow the instructions for your operating system. TrixiShallowWater.jl works with Julia v1.10 and newer. We recommend using the latest stable release of Julia.","category":"page"},{"location":"home/#For-users","page":"TrixiShallowWater.jl","title":"For users","text":"","category":"section"},{"location":"home/","page":"TrixiShallowWater.jl","title":"TrixiShallowWater.jl","text":"TrixiShallowWater.jl and its related tools are registered Julia packages. Hence, you can install TrixiShallowWater.jl, the numerical solver framework Trixi.jl, visualization tools Trixi2Vtk.jl, and Plots.jl as well as relevant time integration sub-packages of OrdinaryDiffEq.jl, by executing the following commands in the Julia REPL:","category":"page"},{"location":"home/","page":"TrixiShallowWater.jl","title":"TrixiShallowWater.jl","text":"julia> using Pkg\n\njulia> Pkg.add([\"TrixiShallowWater\", \"Trixi\", \"Trixi2Vtk\", \"Plots\",\n                \"OrdinaryDiffEqLowStorageRK\", \"OrdinaryDiffEqSSPRK\"])","category":"page"},{"location":"home/","page":"TrixiShallowWater.jl","title":"TrixiShallowWater.jl","text":"You can copy and paste all commands to the REPL including the leading julia> prompts - they will automatically be stripped away by Julia. The package OrdinaryDiffEq.jl and its sub-packages provide time integration schemes used by TrixiShallowWater.jl, while Plots.jl can be used to directly visualize TrixiShallowWater.jl's results from the REPL.","category":"page"},{"location":"home/#For-developers","page":"TrixiShallowWater.jl","title":"For developers","text":"","category":"section"},{"location":"home/","page":"TrixiShallowWater.jl","title":"TrixiShallowWater.jl","text":"If you plan on editing TrixiShallowWater.jl itself, you can download TrixiShallowWater.jl locally and use the code from the cloned directory:","category":"page"},{"location":"home/","page":"TrixiShallowWater.jl","title":"TrixiShallowWater.jl","text":"git clone git@github.com:trixi-framework/TrixiShallowWater.jl.git\ncd TrixiShallowWater.jl\nmkdir run\ncd run\njulia --project=. -e 'using Pkg; Pkg.develop(PackageSpec(path=\"..\"))' # Install local TrixiShallowWater.jl clone\njulia --project=. -e 'using Pkg; Pkg.add([\"Trixi\", \"OrdinaryDiffEqLowStorageRK\", \"OrdinaryDiffEqSSPRK\", \"Trixi2Vtk\", \"Plots\"])' # Install additional packages","category":"page"},{"location":"home/","page":"TrixiShallowWater.jl","title":"TrixiShallowWater.jl","text":"Note that the postprocessing tools Trixi2Vtk.jl and Plots.jl are optional and can be omitted.","category":"page"},{"location":"home/","page":"TrixiShallowWater.jl","title":"TrixiShallowWater.jl","text":"If you installed TrixiShallowWater.jl this way, you always have to start Julia with the --project flag set to your run directory, e.g.,","category":"page"},{"location":"home/","page":"TrixiShallowWater.jl","title":"TrixiShallowWater.jl","text":"julia --project=.","category":"page"},{"location":"home/","page":"TrixiShallowWater.jl","title":"TrixiShallowWater.jl","text":"if already inside the run directory. Further details, of how to develop TrixiShallowWater.jl together with a local clone Trixi.jl, can be found in the Development section of the documentation.","category":"page"},{"location":"home/#Authors","page":"TrixiShallowWater.jl","title":"Authors","text":"","category":"section"},{"location":"home/","page":"TrixiShallowWater.jl","title":"TrixiShallowWater.jl","text":"TrixiShallowWater.jl is maintained by the Trixi authors. Its principal developers are Andrew Winters (Linköping University, Sweden) and Patrick Ersing (Linköping University, Sweden). The full list of contributors can be found in Authors.","category":"page"},{"location":"home/#License-and-contributing","page":"TrixiShallowWater.jl","title":"License and contributing","text":"","category":"section"},{"location":"home/","page":"TrixiShallowWater.jl","title":"TrixiShallowWater.jl","text":"TrixiShallowWater.jl is licensed under the MIT license (see License). Since TrixiShallowWater.jl is an open-source project, we are very happy to accept contributions from the community. To get in touch with the developers, join us on Slack or create an issue.","category":"page"},{"location":"home/#Acknowledgments","page":"TrixiShallowWater.jl","title":"Acknowledgments","text":"","category":"section"},{"location":"home/","page":"TrixiShallowWater.jl","title":"TrixiShallowWater.jl","text":"<p align=\"center\" style=\"font-size:0;\"><!--\n  SRC      --><img align=\"middle\" src=\"https://github.com/trixi-framework/Trixi.jl/assets/3637659/48f9da06-6f7a-4586-b23e-739bee3901c0\" height=\"120\"><!--\n  -->\n</p>","category":"page"},{"location":"home/","page":"TrixiShallowWater.jl","title":"TrixiShallowWater.jl","text":"This project has benefited from funding from Vetenskapsrådet (VR, Swedish Research Council), Sweden through the VR Starting Grant \"Shallow water flows including sediment transport and morphodynamics\", VR grant agreement 2020-03642 VR.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/#Okushiri-Tsunami","page":"Okushiri tsunami","title":"Okushiri Tsunami","text":"","category":"section"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"In this tutorial, we will use the shallow water equations with wetting and drying on an unstructured quadrilateral mesh to numerically approximate the Okushiri tsunami experiment that models the wave runup near the village of Monai on Okushiri Island. This benchmark problem comes from a 1/400 scale laboratory experiment that used a wave tank at the Central Research Institute for Electric Power Industry (CRIEPI) in Abiko, Japan.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"This is an application that exercises the ability of TrixiShallowWater.jl to model tsunami runup onto a complex three-dimensional coastline. The bathymetry data for this test case is approximated with bicubic splines. A thorough description of this problem setup and the original data files are available here. Additional information about this benchmark problem and comparison results can be found in the papers:","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"J. Hou, Q. Liang, H. Zhang, and R. Hinkelmann (2015) An efficient unstructured MUSCL scheme for solving the 2D shallow water equations DOI: 10.1016/j.envsoft.2014.12.007\nM. Ricchiuto (2015) An explicit residual based approach for shallow water flows DOI: 10.1016/j.jcp.2014.09.027","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"The tutorial will cover:","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"Create an unstructured quadrilateral mesh with HOHQMesh.jl\nSet up a SWE solver for wet/dry transitions\nApproximate bathymetry data with TrixiBottomTopography.jl\nCreate custom initial conditions, boundary conditions, and source terms\nPostprocess solution data with Trixi2Vtk.jl\nVisualization with ParaView","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/#Load-required-packages","page":"Okushiri tsunami","title":"Load required packages","text":"","category":"section"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"The core solver component is TrixiShallowWater.jl, which requires Trixi.jl for the underlying spatial discretization and OrdinaryDiffEqSSPRK.jl for time integration. HOHQMesh.jl is needed to generate an unstructured mesh for this problem. TrixiBottomTopography.jl is needed to create a bathymetry approximation that is directly usable by Trixi.jl. Finally, we include CairoMakie.jl for insitu visualization and Trixi2Vtk.jl for postprocessing.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"using HOHQMesh\nusing OrdinaryDiffEqSSPRK\nusing Trixi\nusing TrixiShallowWater\nusing TrixiBottomTopography\nusing CairoMakie\nusing Trixi2Vtk","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/#Visualize-the-original-bathymetry","page":"Okushiri tsunami","title":"Visualize the original bathymetry","text":"","category":"section"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"First, we obtain and plot the raw bathymetry data. An examination of the bathymetry and its features will aid in designing an appropriate mesh for the discretization. We download the raw bathymetry data to make it available locally","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"raw_bathymetry_file = Trixi.download(\"https://gist.githubusercontent.com/andrewwinters5000/305d203c0409d26075aa2993ff367637/raw/df480a6ff63da1916a19820b060abfea83d40dbf/raw_monai_bathymetry.txt\",\n                                     joinpath(@__DIR__, \"raw_monai_bathymetry.txt\"));\nnothing #hide","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"Next, we open and parse the bathymetry data to visualize it","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"file = open(raw_bathymetry_file)\nlines = readlines(file)\nclose(file)\n\nx = zeros(Float64, length(lines) - 1)\ny = zeros(Float64, length(lines) - 1)\nz = zeros(Float64, length(lines) - 1)\n\n# Skip the header of the file\nfor j in 2:length(lines)\n    current_line = split(lines[j])\n    x[j - 1] = parse(Float64, current_line[1])\n    y[j - 1] = parse(Float64, current_line[2])\n    z[j - 1] = -parse(Float64, current_line[3])\nend\n\nsurface(x, y, z,\n        axis = (type = Axis3, xlabel = \"x [m]\", ylabel = \"y [m]\", zlabel = \"z [m]\"),\n        colormap = :greenbrownterrain)","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"From the bathymetry visualization we can identify that there are several regions of interest that require higher resolution to create an accurate approximation. In particular, there is a island located near the center of the domain and a cliff side that dominates the right portion of the domain.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"This information is useful to guide the creation of an unstructured quadrilateral mesh. In HOHQMesh, we set a background grid and then specify targeted refinement regions to add more elements where more resolution is required to resolve the bathymetry.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/#Create-an-unstructured-mesh","page":"Okushiri tsunami","title":"Create an unstructured mesh","text":"","category":"section"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"To begin, we create a new mesh project. The output files created by HOHQMesh will be saved into the \"out\" folder and carry the same name as the project, in this case \"monai_shore\".","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"monai = newProject(\"monai_shore\", \"out\");\nnothing #hide","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"Next, we set the polynomial order for the boundaries to be linear, i.e., polynomials of degree one. The file format is set to \"ISM-V2\" as it is compatible with UnstructuredMesh2D mesh type that will be used later in the solver.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"setPolynomialOrder!(monai, 1)\nsetMeshFileFormat!(monai, \"ISM-V2\");\nnothing #hide","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"The rectangular domain for this problem has no interior or exterior boundary curves. To suppress extraneous output from HOHQMesh during the mesh generation process we create an empty MODEL dictionary.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"HOHQMesh.getModelDict(monai);\nnothing #hide","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"Now we can set a background Cartesian box mesh required to define the length scales in the mesh generation process. The domain for this problem setup is 00 5488 times 00 3402. To initialize the mesh, the domain boundary edges are provided in bounds with order [top, left, bottom, right]. The background grid is coarse with eight elements in the x-direction and four elements in the y-direction.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"bounds = [3.402, 0.0, 0.0, 5.488]\nN = [8, 4, 0]\naddBackgroundGrid!(monai, bounds, N)","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"From the inspection of the bathymetry visualization above we indicate regions in the domain to target additional refinement during mesh generation. One RefinementCenter is placed around the island near the center of the domain. Three RefinementLine areas are placed in the wake region of said island and the coastline.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"island = newRefinementCenter(\"island\", \"smooth\", [3.36, 1.68, 0.0], 0.1, 0.15)\nwake = newRefinementLine(\"wake\", \"smooth\", [3.75, 1.7, 0.0],\n                         [4.75, 1.7, 0.0], 0.15, 0.2)\nshoreline_top = newRefinementLine(\"shoreline\", \"smooth\", [4.816, 3.374, 0.0],\n                                  [4.83, 2.366, 0.0], 0.15, 0.168)\nshoreline_bottom = newRefinementLine(\"shoreline\", \"smooth\", [4.97, 2.3, 0.0],\n                                     [5.32, 1.4, 0.0], 0.075, 0.22);\nnothing #hide","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"These four refinement regions are then added into the monai mesh project.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"add!(monai, island)\nadd!(monai, wake)\nadd!(monai, shoreline_top)\nadd!(monai, shoreline_bottom)","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"One can plot the current project to inspect the background grid and refinement region locations using the command","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"plotProject!(monai, GRID + REFINEMENTS);\nnothing #hide","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"(Image: mesh_before)","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"The locations of the refinement regions look good so that we can generate the mesh. The call to generate_mesh prints mesh also prints quality statistics and updates the visualization.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"generate_mesh(monai);\nnothing #hide","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"(Image: mesh_after)","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"Additionally, this will output the following files to the out folder:","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"monai_shore.control: A HOHQMesh control file for the current project.\nmonai_shore.tec: A TecPlot formatted file to visualize the mesh with other software, e.g., ParaView.\nmonai_shore.mesh: A mesh file with format \"ISM-V2\".","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/#Discretize-the-problem-setup","page":"Okushiri tsunami","title":"Discretize the problem setup","text":"","category":"section"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"With the mesh in hand we can proceed to construct the solver components and callbacks for the tsunami runup problem.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"For this example we solve the two-dimensional shallow water equations, so we use the ShallowWaterEquations2D and specify the gravitational acceleration to gravity = 9.812 as well as a background water height H0 = 0.0. In contrast to the ShallowWaterEquations2D type, this equation type allows contains additional parameters and methods needed to handle wetting and drying.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"equations = ShallowWaterEquations2D(gravity = 9.81, H0 = 0.0)","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"Next, we construct an approximation to the bathymetry with TrixiBottomTopography.jl using a BicubicBSpline with the \"not-a-knot\" boundary closure. For this we first download the bathymetry data that has been preprocessed to be in the format required by TrixiBottomTopography, see here for more information.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"spline_bathymetry_file = Trixi.download(\"https://gist.githubusercontent.com/andrewwinters5000/21255c980c4eda5294f91e8dfe6c7e33/raw/1afb73928892774dc3a902e0c46ffd882ef03ee3/monai_bathymetry_data.txt\",\n                                        joinpath(@__DIR__, \"monai_bathymetry_data.txt\"));\nnothing #hide","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"Create a bicubic B-spline interpolation of the bathymetry data, then create a function to evaluate the resulting spline at a given point (xy). The type of this struct is fixed as BicubicBSpline.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"const bath_spline_struct = BicubicBSpline(spline_bathymetry_file,\n                                          end_condition = \"not-a-knot\")\nbathymetry(x::Float64, y::Float64) = spline_interpolation(bath_spline_struct, x, y);\nnothing #hide","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"We then create a function to supply the initial condition for the simulation.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"@inline function initial_condition_monai_tsunami(x, t,\n                                                 equations::ShallowWaterEquations2D)\n    # Initially water is at rest\n    v1 = 0.0\n    v2 = 0.0\n\n    # Bottom topography values are computed from the bicubic spline created above\n    x1, x2 = x\n    b = bathymetry(x1, x2)\n\n    # It is mandatory to shift the water level at dry areas to make sure the water height h\n    # stays positive. The system would not be stable for h set to a hard zero due to division by h in\n    # the computation of velocity, e.g., (h v) / h. Therefore, a small dry state threshold\n    # with a default value of 5*eps() ≈ 1e-13 in double precision, is set in the constructor above\n    # for the ShallowWaterEquations and added to the initial condition if h = 0.\n    # This default value can be changed within the constructor call depending on the simulation setup.\n    h = max(equations.threshold_limiter, equations.H0 - b)\n\n    # Return the conservative variables\n    return SVector(h, h * v1, h * v2, b)\nend\n\ninitial_condition = initial_condition_monai_tsunami;\nnothing #hide","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"For this tsunami test case a specialized wave maker type of boundary condition is needed. It is used to model an incident wave that approaches from off-shore with a water depth of h = 13535textcm. To create the incident wave information that is valid over the time interval t in 0s 225s we use a CubicBspline to interpolate the given data from the reference data.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"We download the incident wave data that has been preprocessed to be in the format required by TrixiBottomTopography.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"wavemaker_bc_file = Trixi.download(\"https://gist.githubusercontent.com/andrewwinters5000/5b11f5f175bddb326d11d8e28398127e/raw/64980e0e4526e0fcd49589b34ee5458b9a1cebff/monai_wavemaker_bc.txt\",\n                                   joinpath(@__DIR__, \"monai_wavemaker_bc.txt\"));\nnothing #hide","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"Similar to the bathymetry approximation, we construct a cubic B-spline interpolation of the data, then create a function to evaluate the resulting spline at a given t value. The type of this struct is fixed as CubicBSpline.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"const h_spline_struct = CubicBSpline(wavemaker_bc_file; end_condition = \"not-a-knot\")\nH_from_wave_maker(t::Float64) = spline_interpolation(h_spline_struct, t);\nnothing #hide","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"Now we are equipped to define the specialized boundary condition for the incident wave maker.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"@inline function boundary_condition_wave_maker(u_inner, normal_direction::AbstractVector,\n                                               x, t, surface_flux_functions,\n                                               equations::ShallowWaterEquations2D)\n    # Extract the numerical flux functions to compute the conservative and nonconservative\n    # pieces of the approximation\n    surface_flux_function, nonconservative_flux_function = surface_flux_functions\n\n    # Compute the water height from the wave maker input file data\n    # and then clip to avoid negative water heights and division by zero\n    h_ext = max(equations.threshold_limiter, H_from_wave_maker(t) - u_inner[4])\n\n    # Compute the incoming velocity as in Eq. (10) of the paper\n    # - S. Vater, N. Beisiegel, and J. Behrens (2019)\n    #   A limiter-based well-balanced discontinuous Galerkin method for shallow-water flows\n    #   with wetting and drying: Triangular grids\n    #   [DOI: 10.1002/fld.4762](https://doi.org/10.1002/fld.4762)\n    h0 = 0.13535 # reference incident water height converted to meters\n    v1_ext = 2 * (sqrt(equations.gravity * h_ext) - sqrt(equations.gravity * h0))\n\n    # Create the external solution state in the conservative variables\n    u_outer = SVector(h_ext, h_ext * v1_ext, zero(eltype(x)), u_inner[4])\n\n    # Calculate the boundary flux and nonconservative contributions\n    flux = surface_flux_function(u_inner, u_outer, normal_direction, equations)\n\n    noncons_flux = nonconservative_flux_function(u_inner, u_outer, normal_direction,\n                                                 equations)\n\n    return flux, noncons_flux\nend;\nnothing #hide","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"We create the dictionary that assigns the different boundary conditions to physical boundary names. The names for the rectangular domain, e.g. Bottom are the default names provided by HOHQMesh. As per the problem definition, three of the domain boundaries are walls and the incident wave maker boundary condition implemented above is set at the Left domain","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"boundary_condition = Dict(:Bottom => boundary_condition_slip_wall,\n                          :Top => boundary_condition_slip_wall,\n                          :Right => boundary_condition_slip_wall,\n                          :Left => boundary_condition_wave_maker);\nnothing #hide","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"For this application, we also need to model the bottom friction. Thus, we create a new source term, which adds a Manning friction term to the momentum equations.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"@inline function source_terms_manning_friction(u, x, t,\n                                               equations::ShallowWaterEquations2D)\n    h, hv_1, hv_2, _ = u\n\n    n = 0.001 # friction coefficient\n    h = (h^2 + max(h^2, 1e-8)) / (2 * h) # desingularization procedure\n\n    # Compute the common friction term\n    Sf = -equations.gravity * n^2 * h^(-7 / 3) * sqrt(hv_1^2 + hv_2^2)\n\n    return SVector(zero(eltype(x)), Sf * hv_1, Sf * hv_2, zero(eltype(x)))\nend;\nnothing #hide","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"Now we construct the approximation space, where we use the discontinuous Galerkin spectral element method (DGSEM), with a volume integral in flux differencing formulation. For this we first need to specify fluxes for both volume and surface integrals. Since the system is setup in nonconservative form the fluxes need to provided in form of a tuple flux = (conservative flux, nonconservative_flux). To ensure well-balancedness and positivity a reconstruction procedure is applied for the surface fluxes and a special shock-capturing scheme is used to compute the volume integrals. For the surface_flux we specify an HLL-type solver flux_hll_chen_noelle that uses the wave speed estimate min_max_speed_chen_noelle together with the hydrostatic reconstruction procedure hydrostatic_reconstruction_chen_noelle to ensure positivity and that the approximation is well-balanced.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"volume_flux = (flux_wintermeyer_etal, flux_nonconservative_wintermeyer_etal)\nsurface_flux = (FluxHydrostaticReconstruction(flux_hll_chen_noelle,\n                                              hydrostatic_reconstruction_chen_noelle),\n                flux_nonconservative_chen_noelle)\n\nbasis = LobattoLegendreBasis(7) # polynomial approximation space with degree 7\n\nindicator_sc = IndicatorHennemannGassnerShallowWater(equations, basis,\n                                                     alpha_max = 0.5,\n                                                     alpha_min = 0.001,\n                                                     alpha_smooth = true,\n                                                     variable = waterheight)\nvolume_integral = VolumeIntegralShockCapturingHG(indicator_sc;\n                                                 volume_flux_dg = volume_flux,\n                                                 volume_flux_fv = surface_flux)\n\nsolver = DGSEM(basis, surface_flux, volume_integral)","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"The mesh is created using the UnstructuredMesh2D type. The mesh is constructed by reading in the mesh file created by HOHQMesh and written to the directory out.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"mesh_file = joinpath(@__DIR__, \"out\", \"monai_shore.mesh\")\n\nmesh = UnstructuredMesh2D(mesh_file)","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"The semi-discretization object combines the mesh, equations, initial condition, solver, boundary conditions, and source terms into a single object. This object represents the spatial discretization of the problem.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"semi = SemidiscretizationHyperbolic(mesh, equations, initial_condition, solver;\n                                    boundary_conditions = boundary_condition,\n                                    source_terms = source_terms_manning_friction);\nnothing #hide","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"The semidiscretization is complemented with the time interval over which the problem will be integrated and needed to define an ODE problem for time integration.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"tspan = (0.0, 22.5)\node = semidiscretize(semi, tspan);\nnothing #hide","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"Callbacks are used to monitor the simulation, save results, and control the time step size. Below, we define several callbacks for different purposes.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/#Analysis-Callback","page":"Okushiri tsunami","title":"Analysis Callback","text":"","category":"section"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"The AnalysisCallback is used to analyze the solution at regular intervals. Extra analysis quantities such as conservation errors can be added to the callback.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"analysis_interval = 1000\nanalysis_callback = AnalysisCallback(semi, interval = analysis_interval)","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/#Save-Solution-Callback","page":"Okushiri tsunami","title":"Save Solution Callback","text":"","category":"section"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"The SaveSolutionCallback outputs solution data and other quantities like the shock capturing parameter to .h5 files for postprocessing","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"save_solution = SaveSolutionCallback(dt = 0.5,\n                                     save_initial_solution = true,\n                                     save_final_solution = true)","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/#Stepsize-Callback","page":"Okushiri tsunami","title":"Stepsize Callback","text":"","category":"section"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"The StepsizeCallback calculates the time step based on a CFL condition.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"stepsize_callback = StepsizeCallback(cfl = 0.6)","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/#Combine-Callbacks","page":"Okushiri tsunami","title":"Combine Callbacks","text":"","category":"section"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"All the defined callbacks are combined into a single CallbackSet.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"callbacks = CallbackSet(analysis_callback,\n                        stepsize_callback,\n                        save_solution);\nnothing #hide","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/#Run-the-simulation","page":"Okushiri tsunami","title":"Run the simulation","text":"","category":"section"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"Finally, we solve the ODE problem using a strong stability-preserving Runge-Kutta (SSPRK) method. The PositivityPreservingLimiterShallowWater is used as a stage limiter to ensure positivity of the water height during the simulation. The SSPRK43 integrator supports adaptive timestepping; however, this is deactivated with adaptive=false as we use a CFL-based time step restriction.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"stage_limiter! = PositivityPreservingLimiterShallowWater(variables = (waterheight,))\nsol = solve(ode, SSPRK43(stage_limiter!); dt = 1.0,\n          ode_default_options()..., callback = callbacks, adaptive = false);","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/#Postprocessing-the-solution-data","page":"Okushiri tsunami","title":"Postprocessing the solution data","text":"","category":"section"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"It is useful to visualize and inspect the solution and bathymetry of the shallow water equations. One option available is post-processing the Trixi.jl output file(s) with the Trixi2Vtk.jl functionality and plotting them with ParaView.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"To convert all the HDF5-formatted .h5 output file(s) from TrixiShallowWater.jl into VTK format execute the following","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"trixi2vtk(\"out/solution_*.h5\", output_directory = \"out\")","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"then it is possible to open the .pvd file with ParaView and create a video of the simulation. In addition, the trixi2vtk call will create celldata files if one wishes to plot the shock capturing parameter.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"In ParaView, after opening the appropriate solution .pvd file, one can apply two instances of the Warp By Scalar filter to visualize the water height and bathymetry in three dimensions. Many additional customizations, e.g., color scaling, fonts, etc. are available in ParaView. An example of the output at the final time 225 is given below.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"(Image: paraview_example)","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/#Putting-it-all-together","page":"Okushiri tsunami","title":"Putting it all together","text":"","category":"section"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"Now the problem discretization components are assembled and working together with a postprocessing pipeline. We run the simulation, which takes approximately 12 minutes with solution files in the SaveSolutionCallback written every dt = 0.04 to obtain a high temporal resolution of the solution output. We then visualize the solution, bathymetry, and shock capturing using ParaView and create a video of the tsunami runup simulation.","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"  <!--\n  Video details\n  * Source: https://www.youtube.com/watch?v=osyx48Qn10U\n  * Author: Andrew R. Winters (https://liu.se/en/employee/andwi94)\n  * Obtain responsive code by inserting link on https://embedresponsively.com\n  -->\n  <style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style><div class='embed-container'><iframe src='https://www.youtube.com/embed/osyx48Qn10U' frameborder='0' allowfullscreen></iframe></div>","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"Source: Trixi.jl's YouTube channel Trixi Framework","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"","category":"page"},{"location":"tutorials/elixir_shallowwater_monai_tsunami/","page":"Okushiri tsunami","title":"Okushiri tsunami","text":"This page was generated using Literate.jl.","category":"page"},{"location":"code_of_conduct/#Contributor-Covenant-Code-of-Conduct","page":"Code of Conduct","title":"Contributor Covenant Code of Conduct","text":"","category":"section"},{"location":"code_of_conduct/#Our-Pledge","page":"Code of Conduct","title":"Our Pledge","text":"","category":"section"},{"location":"code_of_conduct/","page":"Code of Conduct","title":"Code of Conduct","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","category":"page"},{"location":"code_of_conduct/","page":"Code of Conduct","title":"Code of Conduct","text":"We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","category":"page"},{"location":"code_of_conduct/#Our-Standards","page":"Code of Conduct","title":"Our Standards","text":"","category":"section"},{"location":"code_of_conduct/","page":"Code of Conduct","title":"Code of Conduct","text":"Examples of behavior that contributes to a positive environment for our community include:","category":"page"},{"location":"code_of_conduct/","page":"Code of Conduct","title":"Code of Conduct","text":"Demonstrating empathy and kindness toward other people\nBeing respectful of differing opinions, viewpoints, and experiences\nGiving and gracefully accepting constructive feedback\nAccepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\nFocusing on what is best not just for us as individuals, but for the overall community","category":"page"},{"location":"code_of_conduct/","page":"Code of Conduct","title":"Code of Conduct","text":"Examples of unacceptable behavior include:","category":"page"},{"location":"code_of_conduct/","page":"Code of Conduct","title":"Code of Conduct","text":"The use of sexualized language or imagery, and sexual attention or advances of any kind\nTrolling, insulting or derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others' private information, such as a physical or email address, without their explicit permission\nOther conduct which could reasonably be considered inappropriate in a professional setting","category":"page"},{"location":"code_of_conduct/#Enforcement-Responsibilities","page":"Code of Conduct","title":"Enforcement Responsibilities","text":"","category":"section"},{"location":"code_of_conduct/","page":"Code of Conduct","title":"Code of Conduct","text":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.","category":"page"},{"location":"code_of_conduct/","page":"Code of Conduct","title":"Code of Conduct","text":"Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","category":"page"},{"location":"code_of_conduct/#Scope","page":"Code of Conduct","title":"Scope","text":"","category":"section"},{"location":"code_of_conduct/","page":"Code of Conduct","title":"Code of Conduct","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.","category":"page"},{"location":"code_of_conduct/#Enforcement","page":"Code of Conduct","title":"Enforcement","text":"","category":"section"},{"location":"code_of_conduct/","page":"Code of Conduct","title":"Code of Conduct","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the principal developers responsible for enforcement listed in Authors. All complaints will be reviewed and investigated promptly and fairly.","category":"page"},{"location":"code_of_conduct/","page":"Code of Conduct","title":"Code of Conduct","text":"All community leaders are obligated to respect the privacy and security of the reporter of any incident.","category":"page"},{"location":"code_of_conduct/#Enforcement-Guidelines","page":"Code of Conduct","title":"Enforcement Guidelines","text":"","category":"section"},{"location":"code_of_conduct/","page":"Code of Conduct","title":"Code of Conduct","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","category":"page"},{"location":"code_of_conduct/#1.-Correction","page":"Code of Conduct","title":"1. Correction","text":"","category":"section"},{"location":"code_of_conduct/","page":"Code of Conduct","title":"Code of Conduct","text":"Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.","category":"page"},{"location":"code_of_conduct/","page":"Code of Conduct","title":"Code of Conduct","text":"Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.","category":"page"},{"location":"code_of_conduct/#2.-Warning","page":"Code of Conduct","title":"2. Warning","text":"","category":"section"},{"location":"code_of_conduct/","page":"Code of Conduct","title":"Code of Conduct","text":"Community Impact: A violation through a single incident or series of actions.","category":"page"},{"location":"code_of_conduct/","page":"Code of Conduct","title":"Code of Conduct","text":"Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.","category":"page"},{"location":"code_of_conduct/#3.-Temporary-Ban","page":"Code of Conduct","title":"3. Temporary Ban","text":"","category":"section"},{"location":"code_of_conduct/","page":"Code of Conduct","title":"Code of Conduct","text":"Community Impact: A serious violation of community standards, including sustained inappropriate behavior.","category":"page"},{"location":"code_of_conduct/","page":"Code of Conduct","title":"Code of Conduct","text":"Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.","category":"page"},{"location":"code_of_conduct/#4.-Permanent-Ban","page":"Code of Conduct","title":"4. Permanent Ban","text":"","category":"section"},{"location":"code_of_conduct/","page":"Code of Conduct","title":"Code of Conduct","text":"Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.","category":"page"},{"location":"code_of_conduct/","page":"Code of Conduct","title":"Code of Conduct","text":"Consequence: A permanent ban from any sort of public interaction within the community.","category":"page"},{"location":"code_of_conduct/#Attribution","page":"Code of Conduct","title":"Attribution","text":"","category":"section"},{"location":"code_of_conduct/","page":"Code of Conduct","title":"Code of Conduct","text":"This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 2.0, available at https://www.contributor-covenant.org/version/2/0/codeofconduct.html.","category":"page"},{"location":"code_of_conduct/","page":"Code of Conduct","title":"Code of Conduct","text":"Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.","category":"page"},{"location":"code_of_conduct/","page":"Code of Conduct","title":"Code of Conduct","text":"[homepage]: https://www.contributor-covenant.org","category":"page"},{"location":"code_of_conduct/","page":"Code of Conduct","title":"Code of Conduct","text":"For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.","category":"page"},{"location":"testing/#Testing","page":"Testing","title":"Testing","text":"","category":"section"},{"location":"testing/","page":"Testing","title":"Testing","text":"During the development of TrixiShallowWater.jl, we rely on continuous testing to ensure that modifications or new features do not break existing functionality or add other errors. In the main TrixiShallowWater repository, this is facilitated by GitHub Actions, which allows to run tests automatically upon certain events. When, how, and what is tested by GitHub Actions is controlled by the workflow file .github/workflows/ci.yml. In TrixiShallowWater.jl tests are triggered by","category":"page"},{"location":"testing/","page":"Testing","title":"Testing","text":"each git push to main and\neach git push to any pull request.","category":"page"},{"location":"testing/","page":"Testing","title":"Testing","text":"Besides checking functionality, we also analyze the Test coverage to ensure that we do not miss important parts during testing.","category":"page"},{"location":"testing/","page":"Testing","title":"Testing","text":"note: Test and coverage requirements\nBefore merging a pull request (PR) to main, we require thatthe code passes all functional tests\ncode coverage does not decrease.","category":"page"},{"location":"testing/#Testing-setup","page":"Testing","title":"Testing setup","text":"","category":"section"},{"location":"testing/","page":"Testing","title":"Testing","text":"The entry point for all testing is the file test/runtests.jl, which is run by the automated tests and which can be triggered manually by executing","category":"page"},{"location":"testing/","page":"Testing","title":"Testing","text":"julia> using Pkg; Pkg.test(\"TrixiShallowWater\")","category":"page"},{"location":"testing/","page":"Testing","title":"Testing","text":"in the REPL. Since there already exist many tests, we have split them up into multiple files in the test directory to allow for faster testing of individual parts of the code. Thus in addition to performing all tests, you can also just include one of the files named test_xxx.jl to run only a specific subset, e.g.,","category":"page"},{"location":"testing/","page":"Testing","title":"Testing","text":"julia> # Run all test for the TreeMesh1D\n       include(joinpath(\"test\", \"test_tree_1d.jl\"))","category":"page"},{"location":"testing/#Adding-new-tests","page":"Testing","title":"Adding new tests","text":"","category":"section"},{"location":"testing/","page":"Testing","title":"Testing","text":"We use Julia's built-in unit testing capabilities to configure tests. In general, newly added code must be covered by at least one test, and all new scripts added to the examples/ directory must be used at least once during testing. New tests should be added to the corresponding test/test_xxx.jl file. Please study one of the existing tests and stay consistent to the current style when creating new tests.","category":"page"},{"location":"testing/","page":"Testing","title":"Testing","text":"Since we want to test as much as possible, we have a lot of tests and frequently create new ones. Therefore, new tests should be as short as reasonably possible, i.e., without being too insensitive to pick up changes or errors in the code.","category":"page"},{"location":"testing/","page":"Testing","title":"Testing","text":"When you add new tests, please check whether all CI jobs still take approximately the same time. If the job where you added new tests takes much longer than everything else, please consider moving some tests from one job to another (or report this incident and ask the main developers for help).","category":"page"},{"location":"testing/","page":"Testing","title":"Testing","text":"note: Test duration\nAs a general rule, tests should last no more than 10 seconds when run with a single thread and after compilation (i.e., excluding the first run).","category":"page"},{"location":"testing/#Test-coverage","page":"Testing","title":"Test coverage","text":"","category":"section"},{"location":"testing/","page":"Testing","title":"Testing","text":"In addition to ensuring that the code produces the expected results, the automated tests also record the code coverage. The resulting coverage reports, i.e., which lines of code were executed by at least one test and are thus considered \"covered\" by testing, are automatically uploaded to Coveralls for easy analysis. Typically, you see a number of Coveralls results at the bottom of each pull request: One for each parallel job (see Testing setup), which can usually be ignored since they only cover parts of the code by definition, and a cumulative coverage result named coverage/coveralls. The \"Details\" link takes you to a detailed report on which lines of code are covered by tests, which ones are missed, and especially which new lines the pull requests adds to TrixiShallowWater.jl's code base that are not yet covered by testing.","category":"page"},{"location":"changelog/#Changelog","page":"Changelog","title":"Changelog","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"TrixiShallowWater.jl follows the interpretation of semantic versioning (semver) used in the Julia ecosystem. Notable changes will be documented in this file for human readability.","category":"page"},{"location":"changelog/#Changes-when-updating-to-v0.2-from-v0.1.x","page":"Changelog","title":"Changes when updating to v0.2 from v0.1.x","text":"","category":"section"},{"location":"changelog/#Added","page":"Changelog","title":"Added","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"New equation ShallowWaterEquationsQuasi1D and functions FluxHydrostaticReconstruction,  flux_nonconservative_audusse_etal, and hydrostatic_reconstruction_audusse_etal are now available through TrixiShallowWater.jl instead of Trixi.jl. (#96)","category":"page"},{"location":"changelog/#Changed","page":"Changelog","title":"Changed","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"ShallowWaterEquationsWetDry have been renamed to ShallowWaterEquations. The source code for these equations is now implemented directly in TrixiShallowWater.jl (#96).","category":"page"},{"location":"changelog/#Deprecated","page":"Changelog","title":"Deprecated","text":"","category":"section"},{"location":"changelog/#Removed","page":"Changelog","title":"Removed","text":"","category":"section"},{"location":"changelog/#Changes-in-the-v0.1-lifecycle","page":"Changelog","title":"Changes in the v0.1 lifecycle","text":"","category":"section"},{"location":"changelog/#Added-2","page":"Changelog","title":"Added","text":"","category":"section"},{"location":"changelog/","page":"Changelog","title":"Changelog","text":"Experimental support for well-balanced mortars together with AMR #45\nNew boundary conditions BoundaryConditionWaterHeight and BoundaryConditionMomentum now  available for the ShallowWaterEquationsWetDry to impose either the water height or the momentum  at the boundary. #91","category":"page"},{"location":"changelog/#Changed-2","page":"Changelog","title":"Changed","text":"","category":"section"},{"location":"changelog/#Deprecated-2","page":"Changelog","title":"Deprecated","text":"","category":"section"},{"location":"changelog/#Removed-2","page":"Changelog","title":"Removed","text":"","category":"section"},{"location":"authors/#trixi_sw_authors","page":"Authors","title":"Authors","text":"","category":"section"},{"location":"authors/","page":"Authors","title":"Authors","text":"TrixiShallowWater.jl's development is coordinated by a group of principal developers, who are also its main contributors and who can be contacted in case of questions about TrixiShallowWater.jl. In addition, there are contributors who have provided substantial additions or modifications. Together, these two groups form \"The TrixiShallowWater.jl Authors\" as mentioned under License.","category":"page"},{"location":"authors/#Principal-Developers","page":"Authors","title":"Principal Developers","text":"","category":"section"},{"location":"authors/","page":"Authors","title":"Authors","text":"Andrew Winters, Linköping University, Sweden\nPatrick Ersing, Linköping University, Sweden","category":"page"},{"location":"authors/#Contributors","page":"Authors","title":"Contributors","text":"","category":"section"},{"location":"authors/","page":"Authors","title":"Authors","text":"The following people contributed major additions or modifications to TrixiShallowWater.jl and are listed in alphabetical order:","category":"page"},{"location":"authors/","page":"Authors","title":"Authors","text":"Maximilian D. Bertrand\nPatrick Ersing\nSven Goldberg\nHendrik Ranocha\nMichael Schlottke-Lakemper\nAndrew Winters","category":"page"},{"location":"reference/#TrixiShallowWater.jl-API","page":"Reference","title":"TrixiShallowWater.jl API","text":"","category":"section"},{"location":"reference/#TrixiShallowWater.flux_hll_chen_noelle","page":"Reference","title":"TrixiShallowWater.flux_hll_chen_noelle","text":"flux_hll_chen_noelle = FluxHLL(min_max_speed_chen_noelle)\n\nAn instance of Trixi.FluxHLL specific to the shallow water equations that uses the wave speed estimates from min_max_speed_chen_noelle. This HLL flux is guaranteed to have zero numerical mass flux out of a \"dry\" element, maintain positivity of the water height, and satisfy an entropy inequality.\n\nFor complete details see Section 2.4 of the following reference\n\nGuoxian Chen and Sebastian Noelle (2017) A new hydrostatic reconstruction scheme based on subcell reconstructions DOI: 10.1137/15M1053074\n\n\n\n\n\n","category":"constant"},{"location":"reference/#TrixiShallowWater.BoundaryConditionMomentum-Union{Tuple{RealT}, Tuple{Real, Real, ShallowWaterEquations2D{RealT}}} where RealT","page":"Reference","title":"TrixiShallowWater.BoundaryConditionMomentum","text":"BoundaryConditionMomentum(hv1_boundary, hv2_boundary, equations::ShallowWaterEquations2D)\n\nCreate a boundary condition that sets a fixed momentum in x- and y- directions, hv1_boundary and hv2_boundary, at the boundary and extrapolates the water height h_boundary from the incoming Riemann invariant.\n\nThe external momentum can be specified as a constant value or as a function of time, e.g.\n\n   BoundaryConditionMomentum(hv1_boundary, hv2_boundary, equations)\n   BoundaryConditionMomentum(t -> hv1_boundary(t), t -> hv2_boundary(t), equations)\n\nMore details can be found in the paper:\n\nLixiang Song, Jianzhong Zhou, Jun Guo, Qiang Zou, Yi Liu (2011) A robust well-balanced finite volume model for shallow water flows with wetting and drying over irregular terrain doi: 10.1016/j.advwatres.2011.04.017\n\nwarning: Experimental code\nThis is an experimental feature and can change any time.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.BoundaryConditionMomentum-Union{Tuple{RealT}, Tuple{Real, ShallowWaterEquations1D{RealT}}} where RealT","page":"Reference","title":"TrixiShallowWater.BoundaryConditionMomentum","text":"BoundaryConditionMomentum(hv_boundary, equations::ShallowWaterEquations1D)\n\nCreate a boundary condition that sets a fixed momentum hv_boundary at the boundary and  extrapolates the water height h_boundary from the incoming Riemann invariant.\n\nThe external momentum can be specified as a constant value or as a function of time, e.g.\n\n   BoundaryConditionMomentum(hv_boundary, equations)\n   BoundaryConditionMomentum(t -> hv_boundary(t), equations)\n\nMore details can be found in the paper:\n\nLixiang Song, Jianzhong Zhou, Jun Guo, Qiang Zou, Yi Liu (2011) A robust well-balanced finite volume model for shallow water flows with wetting and drying over irregular terrain doi: 10.1016/j.advwatres.2011.04.017\n\nwarning: Experimental code\nThis is an experimental feature and can change any time.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.BoundaryConditionWaterHeight-Union{Tuple{RealT}, Tuple{Real, ShallowWaterEquations1D{RealT}}} where RealT","page":"Reference","title":"TrixiShallowWater.BoundaryConditionWaterHeight","text":"BoundaryConditionWaterHeight(h_boundary, equations::ShallowWaterEquations1D)\n\nCreate a boundary condition that uses h_boundary to specify a fixed water height at the  boundary and extrapolates the velocity from the incoming Riemann invariant.\n\nThe external water height h_boundary can be specified as a constant value or as a function of time, e.g.\n\n   BoundaryConditionWaterHeight(h_boundary, equations))\n   BoundaryConditionWaterHeight(t -> h_boundary(t), equations))\n\nMore details can be found in the paper:\n\nLixiang Song, Jianzhong Zhou, Jun Guo, Qiang Zou, Yi Liu (2011) A robust well-balanced finite volume model for shallow water flows with wetting and drying over irregular terrain doi: 10.1016/j.advwatres.2011.04.017\n\nwarning: Experimental code\nThis is an experimental feature and can change any time.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.BoundaryConditionWaterHeight-Union{Tuple{RealT}, Tuple{Real, ShallowWaterEquations2D{RealT}}} where RealT","page":"Reference","title":"TrixiShallowWater.BoundaryConditionWaterHeight","text":"BoundaryConditionWaterHeight(h_boundary, equations::ShallowWaterEquations2D)\n\nCreate a boundary condition that uses h_boundary to specify a fixed water height at the boundary and extrapolates the velocity from the incoming Riemann invariant.\n\nThe external water height h_boundary can be specified as a constant value or as a function of time, e.g.\n\n   BoundaryConditionWaterHeight(h_boundary, equations))\n   BoundaryConditionWaterHeight(t -> h_boundary(t), equations))\n\nMore details can be found in the paper:\n\nLixiang Song, Jianzhong Zhou, Jun Guo, Qiang Zou, Yi Liu (2011) A robust well-balanced finite volume model for shallow water flows with wetting and drying over irregular terrain doi: 10.1016/j.advwatres.2011.04.017\n\nwarning: Experimental code\nThis is an experimental feature and can change any time.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.FluxHydrostaticReconstruction","page":"Reference","title":"TrixiShallowWater.FluxHydrostaticReconstruction","text":"FluxHydrostaticReconstruction(numerical_flux, hydrostatic_reconstruction)\n\nAllow for some kind of hydrostatic reconstruction of the solution state prior to the surface flux computation. This is a particular strategy to ensure that the method remains well-balanced for the shallow water equations, see ShallowWaterEquations1D or ShallowWaterEquations2D.\n\nFor example, the hydrostatic reconstruction from Audusse et al. is implemented in one and two spatial dimensions, see hydrostatic_reconstruction_audusse_etal or the original paper\n\nEmmanuel Audusse, François Bouchut, Marie-Odile Bristeau, Rupert Klein, and Benoit Perthame (2004) A fast and stable well-balanced scheme with hydrostatic reconstruction for shallow water flows DOI: 10.1137/S1064827503431090\n\nOther hydrostatic reconstruction techniques are available, particularly to handle wet / dry fronts. A good overview of the development and application of hydrostatic reconstruction can be found in\n\nGuoxian Chen and Sebastian Noelle A unified surface-gradient and hydrostatic reconstruction scheme for the shallow water equations (2021) RWTH Aachen preprint\nAndreas Buttinger-Kreuzhuber, Zsolt Horváth, Sebastian Noelle, Günter Blöschl and Jürgen Waser (2019) A fast second-order shallow water scheme on two-dimensional structured grids over abrupt topography DOI: 10.1016/j.advwatres.2019.03.010\n\n\n\n\n\n","category":"type"},{"location":"reference/#TrixiShallowWater.GrassModel","page":"Reference","title":"TrixiShallowWater.GrassModel","text":"GrassModel(; A_g, m_g=3)\n\nCreates a Grass model to compute the sediment discharge q_s as\n\nq_s = A_g v^m_g\n\nwith the coefficients A_g and m_g. The constant A_g lies in the interval 01 and is a dimensional calibration constant that is usually measured experimentally. It expresses the kind of interaction between the fluid and the sediment, the strength of which increases as A_g approaches to 1. The factor m_g lies in the interval 1 4. Typically, one considers an odd integer value for m_g such that the sediment discharge q_s can be differentiated and the model remains valid for all values of the velocity v.\n\nAn overview of different formulations to compute the sediment discharge can be found in:\n\nM.J. Castro Díaz, E.D. Fernández-Nieto, A.M. Ferreiro (2008)\nSediment transport models in Shallow Water equations and numerical approach by high order finite volume methods\nDOI:10.1016/j.compfluid.2007.07.017\n\n\n\n\n\n","category":"type"},{"location":"reference/#TrixiShallowWater.IndicatorHennemannGassnerShallowWater","page":"Reference","title":"TrixiShallowWater.IndicatorHennemannGassnerShallowWater","text":"IndicatorHennemannGassnerShallowWater(equations::AbstractEquations, basis;\n                                      alpha_max=0.5,\n                                      alpha_min=0.001,\n                                      alpha_smooth=true,\n                                      variable)\n\nModified version of the Trixi.IndicatorHennemannGassner indicator used for shock-capturing for shallow water equations. After the element-wise values for the blending factors are computed an additional check is made to see if the element is partially wet. In this case, partially wet elements are set to use the pure finite volume scheme that is guaranteed to be well-balanced for this wet/dry transition state of the flow regime.\n\nSee also Trixi.VolumeIntegralShockCapturingHG.\n\nReferences\n\nHennemann, Gassner (2020) \"A provably entropy stable subcell shock capturing approach for high order split form DG\" arXiv: 2008.12044\n\n\n\n\n\n","category":"type"},{"location":"reference/#TrixiShallowWater.ManningFriction","page":"Reference","title":"TrixiShallowWater.ManningFriction","text":"ManningFriction(; n)\n\nCreates a Manning friction model for the bottom friction with Manning coefficient n. The type is used to dispatch on the respective friction law through the shear_stress_coefficient when computing the shear_stress.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TrixiShallowWater.PositivityPreservingLimiterShallowWater","page":"Reference","title":"TrixiShallowWater.PositivityPreservingLimiterShallowWater","text":"PositivityPreservingLimiterShallowWater(; variables)\n\nThe limiter is specifically designed for the shallow water equations. It is applied to all scalar variables in their given order using the defined threshold_limiter from the equations struct  (e.g. in ShallowWaterEquations1D) to determine the minimal acceptable values. The order of the variables is important and might have a strong influence on the robustness. The limiter is available for the ShallowWaterEquations1D, ShallowWaterEquations2D, and ShallowWaterMultiLayerEquations1D.\n\nAs opposed to the standard version of the Trixi.PositivityPreservingLimiterZhangShu, nodes with a water height below the threshold_limiter are treated in a special way. To avoid numerical problems caused by velocities close to zero, the velocity is cut off, such that the node can be identified as \"dry\". The special feature of the ShallowWaterEquations used here is that the bottom topography is stored as an additional quantity in the solution vector u. However, the value of the bottom topography should not be changed. That is why, it is not limited.\n\nAfter the limiting process is applied to all degrees of freedom, for safety reasons, the threshold_limiter is applied again on all the DG nodes in order to avoid water height below. In the case where the cell mean value is below the threshold before applying the limiter, there could still be dry nodes afterwards due to the logic of the limiter. Additionally, a velocity  desingularization is applied after the limiting to avoid numerical problems near dry states. Details about the desingularization strategy can be found in Section 2.2 of the paper\n\nA. Kurganov, G. Petrova (2007) A second-order well-balanced positivity preserving central-upwind scheme for the Saint-Venant system doi: 10.4310/CMS.2007.v5.n1.a6\n\nFor the ShallowWaterMultiLayerEquations1D the implementation differs. In this case the  positivity limiter is applied layerwise and only the waterheight h is limited within each layer.\n\nThis fully-discrete positivity-preserving limiter is based on the work of\n\nZhang, Shu (2011) Maximum-principle-satisfying and positivity-preserving high-order schemes for conservation laws: survey and new developments doi: 10.1098/rspa.2011.0153\n\nThe specific implementation for the `ShallowWaterMultiLayerEquations1D is based on the work of\n\nY. Xing, X. Zhang (2013) Positivity-preserving well-balanced discontinuous Galerkin methods for the shallow water equations on unstructured triangular meshes doi: 10.1007/s10915-012-9644-4\n\n\n\n\n\n","category":"type"},{"location":"reference/#TrixiShallowWater.ShallowWaterEquations1D","page":"Reference","title":"TrixiShallowWater.ShallowWaterEquations1D","text":"ShallowWaterEquations1D(; gravity, H0 = 0, threshold_limiter = nothing, threshold_wet = nothing,\n                        threshold_partially_wet = nothing, threshold_desingularization = nothing)\n\nShallow water equations (SWE) in one space dimension. The equations are given by\n\nbeginaligned\n  fracpartial hpartial t + fracpartialpartial x(h v) = 0 \n    fracpartialpartial t(h v) + fracpartialpartial xleft(h v^2 + fracg2h^2right)\n    + g h fracpartial bpartial x = 0\nendaligned\n\nThe unknown quantities of the SWE are the water height h and the velocity v. The gravitational acceleration is denoted by g and the (possibly) variable bottom topography function b(x). Conservative variable water height h is measured from the bottom topography b, therefore one also defines the total water height as H = h + b.\n\nThe additional quantity H_0 is also available to store a reference value for the total water height that is useful to set initial conditions or test the \"lake-at-rest\" well-balancedness.\n\nAlso, there are four thresholds which prevent numerical problems as well as instabilities. None of them have to be passed, as default values are defined within the struct. The first one, threshold_limiter, is used in PositivityPreservingLimiterShallowWater on the water height, as a (small) shift on the initial condition and cutoff before the next time step. The second one, threshold_wet, is applied on the water height to define when the flow is \"wet\" before calculating the numerical flux. A third threshold_partially_wet is applied on the water height to define \"partially wet\" elements in IndicatorHennemannGassnerShallowWater, that are then calculated with a pure FV method to ensure well-balancedness. Lastly, threshold_desingularization is used in PositivityPreservingLimiterShallowWater for the velocity desingularization procedure. For Float64 no threshold needs to be passed, as default values are defined within the struct. For other number formats threshold_partially_wet and threshold_desingularization must be provided.\n\nThe bottom topography function b(x) is set inside the initial condition routine for a particular problem setup. To test the conservative form of the SWE one can set the bottom topography variable b to zero.\n\nIn addition to the unknowns, Trixi.jl currently stores the bottom topography values at the approximation points despite being fixed in time. This is done for convenience of computing the bottom topography gradients on the fly during the approximation as well as computing auxiliary quantities like the total water height H or the entropy variables. This affects the implementation and use of these equations in various ways:\n\nThe flux values corresponding to the bottom topography must be zero.\nThe bottom topography values must be included when defining initial conditions, boundary conditions or source terms.\nTrixi.AnalysisCallback analyzes this variable.\nTrixi.jl's visualization tools will visualize the bottom topography by default.\n\nReferences for the SWE are many but a good introduction is available in Chapter 13 of the book:\n\nRandall J. LeVeque (2002) Finite Volume Methods for Hyperbolic Problems DOI: 10.1017/CBO9780511791253\n\n\n\n\n\n","category":"type"},{"location":"reference/#TrixiShallowWater.ShallowWaterEquations2D","page":"Reference","title":"TrixiShallowWater.ShallowWaterEquations2D","text":"ShallowWaterEquations2D(; gravity, H0 = 0, threshold_limiter = nothing, threshold_wet = nothing, \n                          threshold_partially_wet = nothing, threshold_desingularization = nothing)\n\nShallow water equations (SWE) in two space dimensions. The equations are given by\n\nbeginaligned\n  fracpartial hpartial t + fracpartialpartial x(h v_1)\n    + fracpartialpartial y(h v_2) = 0 \n    fracpartialpartial t(h v_1) + fracpartialpartial xleft(h v_1^2 + fracg2h^2right)\n    + fracpartialpartial y(h v_1 v_2) + g h fracpartial bpartial x = 0 \n    fracpartialpartial t(h v_2) + fracpartialpartial x(h v_1 v_2)\n    + fracpartialpartial yleft(h v_2^2 + fracg2h^2right) + g h fracpartial bpartial y = 0\nendaligned\n\nThe unknown quantities of the SWE are the water height h and the velocities mathbfv = (v_1 v_2)^T. The gravitational acceleration is denoted by g and the (possibly) variable bottom topography function b(xy). Conservative variable water height h is measured from the bottom topography b, therefore one also defines the total water height as H = h + b.\n\nThe additional quantity H_0 is also available to store a reference value for the total water height that is useful to set initial conditions or test the \"lake-at-rest\" well-balancedness.\n\nAlso, there are four thresholds which prevent numerical problems as well as instabilities. None of them have to be passed, as default values are defined within the struct. The first one, threshold_limiter, is used in PositivityPreservingLimiterShallowWater on the water height, as a (small) shift on the initial condition and cutoff before the next time step. The second one, threshold_wet, is applied on the water height to define when the flow is \"wet\" before calculating the numerical flux. A third threshold_partially_wet is applied on the water height to define \"partially wet\" elements in IndicatorHennemannGassnerShallowWater, that are then calculated with a pure FV method to ensure well-balancedness. Lastly, threshold_desingularization is used in PositivityPreservingLimiterShallowWater for the velocity desingularization procedure. For Float64 no threshold needs to be passed, as default values are defined within the struct. For other number formats  threshold_partially_wet and threshold_desingularization must be provided.\n\nThe bottom topography function b(xy) is set inside the initial condition routine for a particular problem setup. To test the conservative form of the SWE one can set the bottom topography variable b to zero.\n\nIn addition to the unknowns, TrixiShallowWater.jl currently stores the bottom topography values at the approximation points despite being fixed in time. This is done for convenience of computing the bottom topography gradients on the fly during the approximation as well as computing auxiliary quantities like the total water height H or the entropy variables. This affects the implementation and use of these equations in various ways:\n\nThe flux values corresponding to the bottom topography must be zero.\nThe bottom topography values must be included when defining initial conditions, boundary conditions or source terms.\nTrixi.AnalysisCallback analyzes this variable.\nTrixi.jl's visualization tools will visualize the bottom topography by default.\n\nReferences for the SWE are many but a good introduction is available in Chapter 13 of the book:\n\nRandall J. LeVeque (2002) Finite Volume Methods for Hyperbolic Problems DOI: 10.1017/CBO9780511791253\n\n\n\n\n\n","category":"type"},{"location":"reference/#TrixiShallowWater.ShallowWaterEquationsQuasi1D","page":"Reference","title":"TrixiShallowWater.ShallowWaterEquationsQuasi1D","text":"ShallowWaterEquationsQuasi1D(; gravity, H0 = 0)\n\nThe quasi-1D shallow water equations (SWE). The equations are given by\n\nbeginaligned\n  fracpartialpartial t(a h) + fracpartialpartial x(a h v) = 0 \n    fracpartialpartial t(a h v) + fracpartialpartial x(a h v^2)\n    + g a h fracpartialpartial x(h + b) = 0\nendaligned\n\nThe unknown quantities of the Quasi-1D SWE are the water height h and the scaled velocity v. The gravitational acceleration is denoted by g, the (possibly) variable bottom topography function b(x), and (possibly) variable channel width a(x). The water height h is measured from the bottom topography b, therefore one also defines the total water height as H = h + b.\n\nThe additional quantity H_0 is also available to store a reference value for the total water height that is useful to set initial conditions or test the \"lake-at-rest\" well-balancedness.\n\nThe bottom topography function b(x) and channel width a(x) are set inside the initial condition routine for a particular problem setup. To test the conservative form of the SWE one can set the bottom topography variable b to zero and a to one. \n\nIn addition to the unknowns, TrixiShallowWater.jl stores the bottom topography and channel width values at the approximation points  despite being fixed in time. This is done for convenience of computing the bottom topography gradients on the fly during the approximation as well as computing auxiliary quantities like the total water height H or the entropy variables. This affects the implementation and use of these equations in various ways:\n\nThe flux values corresponding to the bottom topography and channel width must be zero.\nThe bottom topography and channel width values must be included when defining initial conditions, boundary conditions or source terms.\nAnalysisCallback analyzes this variable.\nTrixi.jl's visualization tools will visualize the bottom topography and channel width by default.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TrixiShallowWater.ShallowWaterExnerEquations1D","page":"Reference","title":"TrixiShallowWater.ShallowWaterExnerEquations1D","text":"ShallowWaterExnerEquations1D(;gravity, H0 = 0.0,\n                             friction = ManningFriction(n = 0.0),\n                             sediment_model,\n                             porosity,\n                             rho_f, rho_s)\n\nFormulation of the Shallow water-Exner equations in one space dimension that possesses a mathematical entropy inequality. The equations are given by\n\nbegincases\npartial_t h + partial_x hv = 0 \npartial_t hv + partial_x (hv^2) + ghpartial_x (h + h_b) + gfrac1rh_spartial_x (rh + h_b) + fractaurho_f = 0\npartial_t h_b + partial_x q_s = 0\nendcases\n\nThe unknown quantities are the water and sediment height h, h_b and the velocity v. The sediment discharge q_s(h hv) is determined by the sediment_model and is used to determine the active sediment height h_s = q_s  v. Furthermore tau denotes the shear stress at the water-sediment interface and is determined by the friction model. The gravitational acceleration is denoted by g, and rho_f and rho_s are the fluid and sediment densities, respectively. The density ratio is given by r = rho_f  rho_s, where r lies between 0  r  1 as the fluid density rho_f should be smaller than the sediment density rho_s.\n\nThe conservative variable water height h is measured from the sediment height h_b, therefore one also defines the total water height as H = h + h_b.\n\nThe additional quantity H_0 is also available to store a reference value for the total water height that is useful to set initial conditions or test the \"lake-at-rest\" well-balancedness.\n\nThe entropy conservative formulation has been derived in the paper:\n\nE.D. Fernández-Nieto, T.M. de Luna, G. Narbona-Reina and J. de Dieu Zabsonré (2017)\nFormal deduction of the Saint-Venant–Exner model including arbitrarily sloping sediment beds and associated energy\nDOI: 10.1051/m2an/2016018\n\n\n\n\n\n","category":"type"},{"location":"reference/#TrixiShallowWater.ShallowWaterMultiLayerEquations1D","page":"Reference","title":"TrixiShallowWater.ShallowWaterMultiLayerEquations1D","text":"ShallowWaterMultiLayerEquations1D(gravity, H0, rhos)\n\nMulti-Layer Shallow Water equations (MLSWE) in one space dimension. The equations are given by\n\nleft\n\tbeginaligned\t\t\t\n\t\tpartial_t h_m + partial_x h_mv_m = 0\n\t\tpartial h_mv_m + partial_x h_mv_m^2 = -gh_mpartial_x bigg(b + sumlimits_kgeq jh_k + sumlimits_kmfracrho_krho_mh_k bigg)\n\tendaligned\nright\n\nwhere m = 1 2  M is the layer index and the unknown variables are the water height h and the velocity v.  Furthermore, g denotes the gravitational acceleration, b(x) the bottom  topography and rho_m the m-th layer density, that must be chosen such that  rho_1  rho_2    rho_M, to ensure that different layers are ordered from top to bottom, with  increasing density.\n\nWe use a specific formulation of the system, where the pressure term is reformulated as a  nonconservative term, which has some benefits for the design of well-balanced schemes.\n\nThe additional quantity H_0 is also available to store a reference value for the total water height that is useful to set initial conditions or test the \"lake-at-rest\" well-balancedness.\n\nAlso, there are two thresholds which prevent numerical problems as well as instabilities. The limiters are  used in PositivityPreservingLimiterShallowWater on the water height. threshold_limiter  acts as a (small) shift on the initial condition and cutoff before the next time step, whereas  threshold_desingularization is used in the velocity desingularization. A third  threshold_partially_wet is applied on the water height to define \"partially wet\" elements in  IndicatorHennemannGassnerShallowWater, that are then calculated with a pure FV method to ensure well-balancedness. For Float64 no threshold needs to be passed, as default values are  defined within the struct. For other number formats threshold_desingularization and threshold_partially_wet  must be provided.\n\nThe bottom topography function b(x) is set inside the initial condition routine for a particular problem setup.\n\nIn addition to the unknowns, Trixi currently stores the bottom topography values at the approximation points despite being fixed in time. This is done for convenience of computing the bottom topography gradients on the fly during the approximation as well as computing auxiliary quantities like the total water height H or the entropy variables. This affects the implementation and use of these equations in various ways:\n\nThe flux values corresponding to the bottom topography must be zero.\nThe bottom topography values must be included when defining initial conditions, boundary conditions or source terms.\nTrixi.AnalysisCallback analyzes this variable.\nTrixi's visualization tools will visualize the bottom topography by default.\n\nA good introduction for the MLSWE is available in Chapter 12 of the book:     - Benoit Cushman-Roisin (2011)\n      Introduction to geophyiscal fluid dynamics: physical and numerical aspects\n      https://www.sciencedirect.com/bookseries/international-geophysics/vol/101/suppl/C\n      ISBN: 978-0-12-088759-0\n\n\n\n\n\n","category":"type"},{"location":"reference/#TrixiShallowWater.ShallowWaterMultiLayerEquations2D","page":"Reference","title":"TrixiShallowWater.ShallowWaterMultiLayerEquations2D","text":"ShallowWaterMultiLayerEquations2D(gravity, H0, rhos)\n\nMulti-Layer Shallow Water equations (MLSWE) in two space dimension. The equations are given by\n\nleft\n\tbeginaligned\n\t\tpartial_t h_m + partial_x h_mv_m = 0\n\t\tpartial h_mv1_m + partial_x h_mv1_m^2 + partial_y h_mv1_mv2_m = -gh_mpartial_x bigg(b + sumlimits_kgeq jh_k + sumlimits_kmfracrho_krho_mh_k bigg)\n        partial h_mv2_m + partial_x h_mv1_mv2_m + partial_y h_mv2_m^2 = -gh_mpartial_y bigg(b + sumlimits_kgeq jh_k + sumlimits_kmfracrho_krho_mh_k bigg)\n\tendaligned\nright\n\nwhere m = 1 2  M is the layer index and the unknown variables are the water height h and the velocities v1 v2 in both spatial dimensions .  Furthermore, g denotes the gravitational constant, b(x) the bottom topography and rho_m the m-th layer density, that must be chosen such that rho_1  rho_2    rho_M, to ensure that different layers are ordered from top to bottom, with increasing density.\n\nWe use a specific formulation of the system, where the pressure term is reformulated as a nonconservative term, which has some benefits for the design of well-balanced schemes.\n\nThe additional quantity H_0 is also available to store a reference value for the total water height that is useful to set initial conditions or test the \"lake-at-rest\" well-balancedness.\n\nAlso, there are two thresholds which prevent numerical problems as well as instabilities. The limiters are used in PositivityPreservingLimiterShallowWater on the water height. threshold_limiter acts as a (small) shift on the initial condition and cutoff before the next time step, whereas threshold_desingularization is used in the velocity desingularization. A third threshold_partially_wet is applied on the water height to define \"partially wet\" elements in IndicatorHennemannGassnerShallowWater, that are then calculated with a pure FV method to ensure well-balancedness. For Float64 no threshold needs to be passed, as default values are defined within the struct. For other number formats threshold_desingularization and threshold_partially_wet must be provided.\n\nThe bottom topography function b(x) is set inside the initial condition routine for a particular problem setup.\n\nIn addition to the unknowns, Trixi currently stores the bottom topography values at the approximation points despite being fixed in time. This is done for convenience of computing the bottom topography gradients on the fly during the approximation as well as computing auxiliary quantities like the total water height H or the entropy variables. This affects the implementation and use of these equations in various ways:\n\nThe flux values corresponding to the bottom topography must be zero.\nThe bottom topography values must be included when defining initial conditions, boundary conditions or source terms.\nTrixi.AnalysisCallback analyzes this variable.\nTrixi's visualization tools will visualize the bottom topography by default.\n\nA good introduction for the MLSWE is available in Chapter 12 of the book:     - Benoit Cushman-Roisin (2011)\n      Introduction to geophyiscal fluid dynamics: physical and numerical aspects\n      https://www.sciencedirect.com/bookseries/international-geophysics/vol/101/suppl/C\n      ISBN: 978-0-12-088759-0\n\n\n\n\n\n","category":"type"},{"location":"reference/#TrixiShallowWater.ShallowWaterTwoLayerEquations1D","page":"Reference","title":"TrixiShallowWater.ShallowWaterTwoLayerEquations1D","text":"ShallowWaterTwoLayerEquations1D(gravity, H0, rho_upper, rho_lower)\n\nTwo-Layer Shallow Water equations (2LSWE) in one space dimension. The equations are given by\n\nbeginalignat*4\nfracpartialpartial th_upper\n+ fracpartialpartial xleft(h_upper v_1upperright)\n= 0 \nfracpartialpartial tleft(h_upperv_1upperright)\n+ fracpartialpartial xleft(h_upperv_1upper^2 + dfracgh_upper^22right)\n= -gh_upperfracpartialpartial xleft(b+h_lowerright)\nfracpartialpartial th_lower\n+ fracpartialpartial xleft(h_lowerv_1lowerright)\n= 0 \nfracpartialpartial tleft(h_lowerv_1lowerright)\n+ fracpartialpartial xleft(h_lowerv_1lower^2 + dfracgh_lower^22right)\n= -gh_lowerfracpartialpartial xleft(b+dfracrho_upperrho_lowerh_upperright)\nendalignat*\n\nThe unknown quantities of the 2LSWE are the water heights of the {lower} layer h_lower and the {upper} layer h_upper with respective velocities v_1upper and v_1lower. The gravitational acceleration is denoted by g, the layer densitites by rho_upperand rho_lower and the (possibly) variable bottom topography function b(x). The conservative variable water height h_lower is measured from the bottom topography b and h_upper relative to h_lower, therefore one also defines the total water heights as H_upper = h_upper + h_upper + b and H_lower = h_lower + b.\n\nThe densities must be chosen such that rho_upper  rho_lower, to make sure that the heavier fluid rho_lower is in the bottom layer and the lighter fluid rho_upper in the {upper} layer.\n\nThe additional quantity H_0 is also available to store a reference value for the total water height that is useful to set initial conditions or test the \"lake-at-rest\" well-balancedness.\n\nThe bottom topography function b(x) is set inside the initial condition routine for a particular problem setup.\n\nIn addition to the unknowns, Trixi currently stores the bottom topography values at the approximation points despite being fixed in time. This is done for convenience of computing the bottom topography gradients on the fly during the approximation as well as computing auxiliary quantities like the total water height H or the entropy variables. This affects the implementation and use of these equations in various ways:\n\nThe flux values corresponding to the bottom topography must be zero.\nThe bottom topography values must be included when defining initial conditions, boundary conditions or source terms.\nTrixi.AnalysisCallback analyzes this variable.\nTrixi's visualization tools will visualize the bottom topography by default.\n\nA good introduction for the 2LSWE is available in Chapter 12 of the book:\n\nBenoit Cushman-Roisin (2011)\nIntroduction to geophyiscal fluid dynamics: physical and numerical aspects\nhttps://www.sciencedirect.com/bookseries/international-geophysics/vol/101/suppl/C\nISBN: 978-0-12-088759-0\n\n\n\n\n\n","category":"type"},{"location":"reference/#TrixiShallowWater.ShallowWaterTwoLayerEquations2D","page":"Reference","title":"TrixiShallowWater.ShallowWaterTwoLayerEquations2D","text":"ShallowWaterTwoLayerEquations2D(gravity, H0, rho_upper, rho_lower)\n\nTwo-Layer Shallow water equations (2LSWE) in two space dimension. The equations are given by\n\nbeginalignat*8\nfracpartialpartial th_upper\n+ fracpartialpartial xleft(h_upper v_1upperright)\n+ fracpartialpartial yleft(h_upper v_2upperright)  quad\n= quad 0 \nfracpartialpartial tleft(h_upper v_1upperright)\n+ fracpartialpartial xleft(h_upper v_1upper^2 + fracgh_upper^22right)\n+ fracpartialpartial yleft(h_upper v_1upper v_2upperright) quad\n= -gh_upperfracpartialpartial xleft(b+h_lowerright) \nfracpartialpartial tleft(h_upper v_2upperright)\n+ fracpartialpartial xleft(h_upper v_1upper v_2upperright)\n+ fracpartialpartial yleft(h_upper v_2upper^2 + fracgh_upper^22right)\n= -gh_upperfracpartialpartial yleft(b+h_lowerright)\nfracpartialpartial th_lower\n+ fracpartialpartial xleft(h_lower v_1lowerright)\n+ fracpartialpartial yleft(h_lower v_2lowerright)\n= quad 0 \nfracpartialpartial tleft(h_lower v_1lowerright)\n+ fracpartialpartial xleft(h_lower v_1lower^2 + fracgh_lower^22right)\n+ fracpartialpartial yleft(h_lower v_1lower v_2lowerright)\n= -gh_lowerfracpartialpartial xleft(b+fracrho_upperrho_lower h_upperright)\nfracpartialpartial tleft(h_lower v_2lowerright)\n+ fracpartialpartial xleft(h_lower v_1lower v_2lowerright)\n+ fracpartialpartial yleft(h_lower v_2lower^2 + fracgh_lower^22right)\n= -gh_lowerfracpartialpartial yleft(b+fracrho_upperrho_lower h_upperright)\nendalignat*\n\nThe unknown quantities of the 2LSWE are the water heights of the lower layer h_lower and the upper layer h_upper and the respective velocities in x-direction v_1lower and v_1upper and in y-direction v_2lower and v_2upper. The gravitational acceleration is denoted by g, the layer densitites by rho_upperand rho_lower and the (possibly) variable bottom topography function by b(x). Conservative variable water height h_lower is measured from the bottom topography b and h_upper relative to h_lower, therefore one also defines the total water heights as H_lower = h_lower + b and H_upper = h_upper + h_lower + b.\n\nThe densities must be chosen such that rho_upper  rho_lower, to make sure that the heavier fluid rho_lower is in the bottom layer and the lighter fluid rho_upper in the upper layer.\n\nThe additional quantity H_0 is also available to store a reference value for the total water height that is useful to set initial conditions or test the \"lake-at-rest\" well-balancedness.\n\nThe bottom topography function b(x) is set inside the initial condition routine for a particular problem setup.\n\nIn addition to the unknowns, Trixi currently stores the bottom topography values at the approximation points despite being fixed in time. This is done for convenience of computing the bottom topography gradients on the fly during the approximation as well as computing auxiliary quantities like the total water height H or the entropy variables. This affects the implementation and use of these equations in various ways:\n\nThe flux values corresponding to the bottom topography must be zero.\nThe bottom topography values must be included when defining initial conditions, boundary conditions or source terms.\nTrixi.AnalysisCallback analyzes this variable.\nTrixi's visualization tools will visualize the bottom topography by default.\n\nA good introduction for the 2LSWE is available in Chapter 12 of the book:\n\nBenoit Cushman-Roisin (2011)\nIntroduction to geophyiscal fluid dynamics: physical and numerical aspects\nhttps://www.sciencedirect.com/bookseries/international-geophysics/vol/101/suppl/C\nISBN: 978-0-12-088759-0\n\n\n\n\n\n","category":"type"},{"location":"reference/#TrixiShallowWater.ShieldsStressModel","page":"Reference","title":"TrixiShallowWater.ShieldsStressModel","text":"ShieldsStressModel(; m_1, m_2, m_3, k_1, k_2, k_3, theta_c, d_s)\n\nCreate a Shields stress model to compute the sediment discharge q_s based on the generalized formulation from equation (1.2) in the given reference.\n\nThe choice of the real constants m_1, m_2, m_3, k_1, k_2, and k_3 creates different models. For example, setting m_1=0, m_2=1.5, m_3=0, k_1=8, k_2=1, and k_3=0 yields the sedimentation model of Meyer-Peter and Müller as given in MeyerPeterMueller below. The Shields stress represents the ratio of agitating and stabilizing forces in the sediment bed where theta_c is the critical Shields stress for incipient motion and d_s is the mean diameter of the sediment grain size.\n\nE.D. Fernández-Nieto, T.M. de Luna, G. Narbona-Reina and J. de Dieu Zabsonré (2017)\nFormal deduction of the Saint-Venant–Exner model including arbitrarily sloping sediment beds and associated energy\nDOI: 10.1051/m2an/2016018\n\n\n\n\n\n","category":"type"},{"location":"reference/#Trixi.boundary_condition_slip_wall-Tuple{Any, AbstractVector, Any, Any, Any, ShallowWaterEquations2D}","page":"Reference","title":"Trixi.boundary_condition_slip_wall","text":"boundary_condition_slip_wall(u_inner, normal_direction, x, t, surface_flux_function,\n                             equations::ShallowWaterEquations2D)\n\nCreate a boundary state by reflecting the normal velocity component and keep the tangential velocity component unchanged. The boundary water height is taken from the internal value. For details see Section 9.2.5 of the book:\n\nEleuterio F. Toro (2001) Shock-Capturing Methods for Free-Surface Shallow Flows 1st edition ISBN 0471987662\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.boundary_condition_slip_wall-Tuple{Any, AbstractVector, Any, Any, Any, ShallowWaterMultiLayerEquations2D}","page":"Reference","title":"Trixi.boundary_condition_slip_wall","text":"boundary_condition_slip_wall(u_inner, normal_direction, x, t, surface_flux_function,\n                             equations::ShallowWaterMultiLayerEquations2D)\n\nCreate a boundary state by reflecting the normal velocity component and keep the tangential velocity component unchanged. The boundary water height is taken from the internal value. For details see Section 9.2.5 of the book:\n\nEleuterio F. Toro (2001) Shock-Capturing Methods for Free-Surface Shallow Flows 1st edition ISBN 0471987662\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.boundary_condition_slip_wall-Tuple{Any, AbstractVector, Any, Any, Any, ShallowWaterTwoLayerEquations2D}","page":"Reference","title":"Trixi.boundary_condition_slip_wall","text":"boundary_condition_slip_wall(u_inner, normal_direction, x, t, surface_flux_function,\n                             equations::ShallowWaterTwoLayerEquations2D)\n\nCreate a boundary state by reflecting the normal velocity component and keep the tangential velocity component unchanged. The boundary water height is taken from the internal value.\n\nFor details see Section 9.2.5 of the book:\n\nEleuterio F. Toro (2001) Shock-Capturing Methods for Free-Surface Shallow Flows 1st edition ISBN 0471987662\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.boundary_condition_slip_wall-Tuple{Any, Any, Any, Any, Any, Any, ShallowWaterEquations1D}","page":"Reference","title":"Trixi.boundary_condition_slip_wall","text":"boundary_condition_slip_wall(u_inner, orientation_or_normal, x, t, surface_flux_function,\n                              equations::ShallowWaterEquations1D)\n\nCreate a boundary state by reflecting the normal velocity component and keep the tangential velocity component unchanged. The boundary water height is taken from the internal value.\n\nFor details see Section 9.2.5 of the book:\n\nEleuterio F. Toro (2001) Shock-Capturing Methods for Free-Surface Shallow Flows 1st edition ISBN 0471987662\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.boundary_condition_slip_wall-Tuple{Any, Any, Any, Any, Any, Any, ShallowWaterEquations2D}","page":"Reference","title":"Trixi.boundary_condition_slip_wall","text":"boundary_condition_slip_wall(u_inner, orientation, direction, x, t,\n                             surface_flux_function, equations::ShallowWaterEquations2D)\n\nShould be used together with Trixi.TreeMesh.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.boundary_condition_slip_wall-Tuple{Any, Any, Any, Any, Any, Any, ShallowWaterExnerEquations1D}","page":"Reference","title":"Trixi.boundary_condition_slip_wall","text":"boundary_condition_slip_wall(u_inner, orientation_or_normal, x, t, surface_flux_function,\n                              equations::ShallowWaterExnerEquations1D)\n\nCreate a boundary state by reflecting the normal velocity component and keep the tangential velocity component unchanged. The boundary water height is taken from the internal value.\n\nFor details see Section 9.2.5 of the book:\n\nEleuterio F. Toro (2001)\nShock-Capturing Methods for Free-Surface Shallow Flows\n1st edition\nISBN 0471987662\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.boundary_condition_slip_wall-Tuple{Any, Any, Any, Any, Any, Any, ShallowWaterMultiLayerEquations1D}","page":"Reference","title":"Trixi.boundary_condition_slip_wall","text":"boundary_condition_slip_wall(u_inner, orientation_or_normal, x, t, surface_flux_function,\n                             equations::ShallowWaterMultiLayerEquations1D)\n\nCreate a boundary state by reflecting the normal velocity component and keep the tangential velocity component unchanged. The boundary water height is taken from the internal value.\n\nFor details see Section 9.2.5 of the book:\n\nEleuterio F. Toro (2001) Shock-Capturing Methods for Free-Surface Shallow Flows 1st edition ISBN 0471987662\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.boundary_condition_slip_wall-Tuple{Any, Any, Any, Any, Any, Any, ShallowWaterMultiLayerEquations2D}","page":"Reference","title":"Trixi.boundary_condition_slip_wall","text":"boundary_condition_slip_wall(u_inner, orientation, direction, x, t,\n                             surface_flux_function, equations::ShallowWaterMultiLayerEquations2D)\n\nShould be used together with Trixi.TreeMesh.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.boundary_condition_slip_wall-Tuple{Any, Any, Any, Any, Any, Any, ShallowWaterTwoLayerEquations1D}","page":"Reference","title":"Trixi.boundary_condition_slip_wall","text":"boundary_condition_slip_wall(u_inner, orientation_or_normal, x, t, surface_flux_function,\n                             equations::ShallowWaterTwoLayerEquations1D)\n\nCreate a boundary state by reflecting the normal velocity component and keep the tangential velocity component unchanged. The boundary water height is taken from the internal value.\n\nFor details see Section 9.2.5 of the book:\n\nEleuterio F. Toro (2001) Shock-Capturing Methods for Free-Surface Shallow Flows 1st edition ISBN 0471987662\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.flux_chan_etal-Tuple{Any, Any, Integer, ShallowWaterEquationsQuasi1D}","page":"Reference","title":"Trixi.flux_chan_etal","text":"flux_chan_etal(u_ll, u_rr, orientation,\n               equations::ShallowWaterEquationsQuasi1D)\n\nTotal energy conservative (mathematical entropy for quasi 1D shallow water equations) split form. When the bottom topography is nonzero this scheme will be well-balanced when used as a volume_flux. The surface_flux should still use, e.g., FluxPlusDissipation(flux_chan_etal, DissipationLocalLaxFriedrichs()).\n\nFurther details are available in the paper:\n\nJesse Chan, Khemraj Shukla, Xinhui Wu, Ruofeng Liu, Prani Nalluri (2023)  High order entropy stable schemes for the quasi-one-dimensional shallow water and compressible Euler equations DOI: 10.48550/arXiv.2307.12089\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.flux_fjordholm_etal-Tuple{Any, Any, Integer, ShallowWaterEquations1D}","page":"Reference","title":"Trixi.flux_fjordholm_etal","text":"flux_fjordholm_etal(u_ll, u_rr, orientation,\n                    equations::ShallowWaterEquations1D)\n\nTotal energy conservative (mathematical entropy for shallow water equations). When the bottom topography is nonzero this should only be used as a surface flux otherwise the scheme will not be well-balanced. For well-balancedness in the volume flux use flux_wintermeyer_etal.\n\nDetails are available in Eq. (4.1) in the paper:\n\nUlrik S. Fjordholm, Siddhartha Mishr and Eitan Tadmor (2011) Well-balanced and energy stable schemes for the shallow water equations with discontinuous topography DOI: 10.1016/j.jcp.2011.03.042\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.flux_fjordholm_etal-Tuple{Any, Any, Integer, ShallowWaterEquations2D}","page":"Reference","title":"Trixi.flux_fjordholm_etal","text":"flux_fjordholm_etal(u_ll, u_rr, orientation_or_normal_direction,\n                    equations::ShallowWaterEquations2D)\n\nTotal energy conservative (mathematical entropy for shallow water equations). When the bottom topography is nonzero this should only be used as a surface flux otherwise the scheme will not be well-balanced. For well-balancedness in the volume flux use flux_wintermeyer_etal.\n\nDetails are available in Eq. (4.1) in the paper:\n\nUlrik S. Fjordholm, Siddhartha Mishr and Eitan Tadmor (2011) Well-balanced and energy stable schemes for the shallow water equations with discontinuous topography DOI: 10.1016/j.jcp.2011.03.042\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.flux_nonconservative_chan_etal-Tuple{Any, Any, Integer, ShallowWaterEquationsQuasi1D}","page":"Reference","title":"Trixi.flux_nonconservative_chan_etal","text":"flux_nonconservative_chan_etal(u_ll, u_rr, orientation::Integer,\n                               equations::ShallowWaterEquationsQuasi1D)\nflux_nonconservative_chan_etal(u_ll, u_rr, normal_direction::AbstractVector,\n                               equations::ShallowWaterEquationsQuasi1D)    \nflux_nonconservative_chan_etal(u_ll, u_rr, \n                               normal_ll::AbstractVector, normal_rr::AbstractVector,\n                               equations::ShallowWaterEquationsQuasi1D)\n\nNon-symmetric two-point volume flux discretizing the nonconservative (source) term that contains the gradient of the bottom topography ShallowWaterEquationsQuasi1D  and the channel width.\n\nFurther details are available in the paper:\n\nJesse Chan, Khemraj Shukla, Xinhui Wu, Ruofeng Liu, Prani Nalluri (2023)   High order entropy stable schemes for the quasi-one-dimensional   shallow water and compressible Euler equations   DOI: 10.48550/arXiv.2307.12089\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.flux_nonconservative_fjordholm_etal-Tuple{Any, Any, Integer, ShallowWaterEquations1D}","page":"Reference","title":"Trixi.flux_nonconservative_fjordholm_etal","text":"flux_nonconservative_fjordholm_etal(u_ll, u_rr, orientation::Integer,\n                                    equations::ShallowWaterEquations1D)\n\nNon-symmetric two-point surface flux discretizing the nonconservative (source) term of that contains the gradient of the bottom topography ShallowWaterEquations1D.\n\nThis flux can be used together with flux_fjordholm_etal at interfaces to ensure entropy conservation and well-balancedness.\n\nFurther details for the original finite volume formulation are available in\n\nUlrik S. Fjordholm, Siddhartha Mishr and Eitan Tadmor (2011) Well-balanced and energy stable schemes for the shallow water equations with discontinuous topography DOI: 10.1016/j.jcp.2011.03.042\n\nand for curvilinear 2D case in the paper:\n\nNiklas Wintermeyer, Andrew R. Winters, Gregor J. Gassner and David A. Kopriva (2017) An entropy stable nodal discontinuous Galerkin method for the two dimensional shallow water equations on unstructured curvilinear meshes with discontinuous bathymetry DOI: 10.1016/j.jcp.2017.03.036\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.flux_nonconservative_fjordholm_etal-Tuple{Any, Any, Integer, ShallowWaterEquations2D}","page":"Reference","title":"Trixi.flux_nonconservative_fjordholm_etal","text":"flux_nonconservative_fjordholm_etal(u_ll, u_rr, orientation::Integer,\n                                    equations::ShallowWaterEquations2D)\nflux_nonconservative_fjordholm_etal(u_ll, u_rr,\n                                    normal_direction::AbstractVector,\n                                    equations::ShallowWaterEquations2D)\n\nNon-symmetric two-point surface flux discretizing the nonconservative (source) term of that contains the gradient of the bottom topography ShallowWaterEquations2D.\n\nThis flux can be used together with flux_fjordholm_etal at interfaces to ensure entropy conservation and well-balancedness.\n\nFurther details for the original finite volume formulation are available in\n\nUlrik S. Fjordholm, Siddhartha Mishra and Eitan Tadmor (2011) Well-balanced and energy stable schemes for the shallow water equations with discontinuous topography DOI: 10.1016/j.jcp.2011.03.042\n\nand for curvilinear 2D case in the paper:\n\nNiklas Wintermeyer, Andrew R. Winters, Gregor J. Gassner and David A. Kopriva (2017) An entropy stable nodal discontinuous Galerkin method for the two dimensional shallow water equations on unstructured curvilinear meshes with discontinuous bathymetry DOI: 10.1016/j.jcp.2017.03.036\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.flux_nonconservative_wintermeyer_etal-Tuple{Any, Any, Integer, ShallowWaterEquations1D}","page":"Reference","title":"Trixi.flux_nonconservative_wintermeyer_etal","text":"flux_nonconservative_wintermeyer_etal(u_ll, u_rr, orientation::Integer,\n                                      equations::ShallowWaterEquations1D)\n\nNon-symmetric two-point volume flux discretizing the nonconservative (source) term that contains the gradient of the bottom topography ShallowWaterEquations1D.\n\nGives entropy conservation and well-balancedness on both the volume and surface when combined with flux_wintermeyer_etal.\n\nFurther details are available in the papers:\n\nNiklas Wintermeyer, Andrew R. Winters, Gregor J. Gassner and David A. Kopriva (2017) An entropy stable nodal discontinuous Galerkin method for the two dimensional shallow water equations on unstructured curvilinear meshes with discontinuous bathymetry DOI: 10.1016/j.jcp.2017.03.036\nPatrick Ersing, Andrew R. Winters (2023) An entropy stable discontinuous Galerkin method for the two-layer shallow water equations on curvilinear meshes DOI: 10.48550/arXiv.2306.12699\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.flux_nonconservative_wintermeyer_etal-Tuple{Any, Any, Integer, ShallowWaterEquations2D}","page":"Reference","title":"Trixi.flux_nonconservative_wintermeyer_etal","text":"flux_nonconservative_wintermeyer_etal(u_ll, u_rr, orientation::Integer,\n                                      equations::ShallowWaterEquations2D)\nflux_nonconservative_wintermeyer_etal(u_ll, u_rr,\n                                      normal_direction::AbstractVector,\n                                      equations::ShallowWaterEquations2D)\n\nNon-symmetric two-point volume flux discretizing the nonconservative (source) term that contains the gradient of the bottom topography ShallowWaterEquations2D.\n\nFor the surface_flux either flux_wintermeyer_etal or flux_fjordholm_etal can be used to ensure well-balancedness and entropy conservation.\n\nFurther details are available in the papers:\n\nNiklas Wintermeyer, Andrew R. Winters, Gregor J. Gassner and David A. Kopriva (2017) An entropy stable nodal discontinuous Galerkin method for the two dimensional shallow water equations on unstructured curvilinear meshes with discontinuous bathymetry DOI: 10.1016/j.jcp.2017.03.036\nPatrick Ersing, Andrew R. Winters (2023) An entropy stable discontinuous Galerkin method for the two-layer shallow water equations on curvilinear meshes DOI: 10.48550/arXiv.2306.12699\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.flux_wintermeyer_etal-Tuple{Any, Any, Integer, ShallowWaterEquations1D}","page":"Reference","title":"Trixi.flux_wintermeyer_etal","text":"flux_wintermeyer_etal(u_ll, u_rr, orientation,\n                      equations::ShallowWaterEquations1D)\n\nTotal energy conservative (mathematical entropy for shallow water equations) split form. When the bottom topography is nonzero this scheme will be well-balanced when used as a volume_flux. For the surface_flux either flux_wintermeyer_etal or flux_fjordholm_etal can be used to ensure well-balancedness and entropy conservation.\n\nFurther details are available in Theorem 1 of the paper:\n\nNiklas Wintermeyer, Andrew R. Winters, Gregor J. Gassner and David A. Kopriva (2017) An entropy stable nodal discontinuous Galerkin method for the two dimensional shallow water equations on unstructured curvilinear meshes with discontinuous bathymetry DOI: 10.1016/j.jcp.2017.03.036\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.flux_wintermeyer_etal-Tuple{Any, Any, Integer, ShallowWaterEquations2D}","page":"Reference","title":"Trixi.flux_wintermeyer_etal","text":"flux_wintermeyer_etal(u_ll, u_rr, orientation_or_normal_direction,\n                      equations::ShallowWaterEquations2D)\n\nTotal energy conservative (mathematical entropy for shallow water equations) split form. When the bottom topography is nonzero this scheme will be well-balanced when used as a volume_flux. For the surface_flux either flux_wintermeyer_etal or flux_fjordholm_etal can be used to ensure well-balancedness and entropy conservation.\n\nFurther details are available in Theorem 1 of the paper:\n\nNiklas Wintermeyer, Andrew R. Winters, Gregor J. Gassner and David A. Kopriva (2017) An entropy stable nodal discontinuous Galerkin method for the two dimensional shallow water equations on unstructured curvilinear meshes with discontinuous bathymetry DOI: 10.1016/j.jcp.2017.03.036\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.flux_wintermeyer_etal-Tuple{Any, Any, Integer, ShallowWaterTwoLayerEquations1D}","page":"Reference","title":"Trixi.flux_wintermeyer_etal","text":"flux_wintermeyer_etal(u_ll, u_rr, orientation,\n                      equations::ShallowWaterTwoLayerEquations1D)\n\nTotal energy conservative (mathematical entropy for two-layer shallow water equations) split form. When the bottom topography is nonzero this scheme will be well-balanced when used with the  nonconservative flux_nonconservative_ersing_etal. To obtain the flux for the two-layer shallow water equations the flux that is described in the paper for the normal shallow  water equations is used within each layer.\n\nFurther details are available in Theorem 1 of the paper:\n\nNiklas Wintermeyer, Andrew R. Winters, Gregor J. Gassner and David A. Kopriva (2017) An entropy stable nodal discontinuous Galerkin method for the two dimensional shallow water equations on unstructured curvilinear meshes with discontinuous bathymetry DOI: 10.1016/j.jcp.2017.03.036\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.flux_wintermeyer_etal-Tuple{Any, Any, Integer, ShallowWaterTwoLayerEquations2D}","page":"Reference","title":"Trixi.flux_wintermeyer_etal","text":"flux_wintermeyer_etal(u_ll, u_rr, orientation,\n                      equations::ShallowWaterTwoLayerEquations2D)\nflux_wintermeyer_etal(u_ll, u_rr,\n                      normal_direction::AbstractVector,\n                      equations::ShallowWaterTwoLayerEquations2D)\n\nTotal energy conservative (mathematical entropy for two-layer shallow water equations) split form. When the bottom topography is nonzero this scheme will be well-balanced when used with the  nonconservative flux_nonconservative_ersing_etal. To obtain the flux for the two-layer shallow water equations the flux that is described in the paper for the normal shallow  water equations is used within each layer.\n\nFurther details are available in Theorem 1 of the paper:\n\nNiklas Wintermeyer, Andrew R. Winters, Gregor J. Gassner and David A. Kopriva (2017) An entropy stable nodal discontinuous Galerkin method for the two dimensional shallow water equations on unstructured curvilinear meshes with discontinuous bathymetry DOI: 10.1016/j.jcp.2017.03.036\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.initial_condition_convergence_test-Tuple{Any, Any, ShallowWaterEquations1D}","page":"Reference","title":"Trixi.initial_condition_convergence_test","text":"initial_condition_convergence_test(x, t, equations::ShallowWaterEquations1D)\n\nA smooth initial condition used for convergence tests in combination with source_terms_convergence_test (and Trixi.BoundaryConditionDirichlet in non-periodic domains).\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.initial_condition_convergence_test-Tuple{Any, Any, ShallowWaterEquations2D}","page":"Reference","title":"Trixi.initial_condition_convergence_test","text":"initial_condition_convergence_test(x, t, equations::ShallowWaterEquations2D)\n\nA smooth initial condition used for convergence tests in combination with source_terms_convergence_test (and Trixi.BoundaryConditionDirichlet in non-periodic domains).\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.initial_condition_convergence_test-Tuple{Any, Any, ShallowWaterEquationsQuasi1D}","page":"Reference","title":"Trixi.initial_condition_convergence_test","text":"initial_condition_convergence_test(x, t, equations::ShallowWaterEquationsQuasi1D)\n\nA smooth initial condition used for convergence tests in combination with source_terms_convergence_test (and BoundaryConditionDirichlet(initial_condition_convergence_test) in non-periodic domains).\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.initial_condition_convergence_test-Tuple{Any, Any, ShallowWaterExnerEquations1D}","page":"Reference","title":"Trixi.initial_condition_convergence_test","text":"initial_condition_convergence_test(x, t, equations::ShallowWaterExnerEquations1D)\n\nA smooth initial condition used for convergence tests in combination with Trixi.source_terms_convergence_test.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.initial_condition_convergence_test-Tuple{Any, Any, ShallowWaterMultiLayerEquations1D}","page":"Reference","title":"Trixi.initial_condition_convergence_test","text":"initial_condition_convergence_test(x, t, equations::ShallowWaterMultiLayerEquations1D)\n\nA smooth initial condition for a three-layer configuration used for convergence tests in combination with source_terms_convergence_test (and Trixi.BoundaryConditionDirichlet in non-periodic domains).\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.initial_condition_convergence_test-Tuple{Any, Any, ShallowWaterMultiLayerEquations2D}","page":"Reference","title":"Trixi.initial_condition_convergence_test","text":"initial_condition_convergence_test(x, t, equations::ShallowWaterMultiLayerEquations2D)\n\nA smooth initial condition for a three-layer configuration used for convergence tests in combination with source_terms_convergence_test (and Trixi.BoundaryConditionDirichlet in non-periodic domains).\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.initial_condition_convergence_test-Tuple{Any, Any, ShallowWaterTwoLayerEquations1D}","page":"Reference","title":"Trixi.initial_condition_convergence_test","text":"initial_condition_convergence_test(x, t, equations::ShallowWaterTwoLayerEquations1D)\n\nA smooth initial condition used for convergence tests in combination with source_terms_convergence_test (and Trixi.BoundaryConditionDirichlet in non-periodic domains).\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.initial_condition_convergence_test-Tuple{Any, Any, ShallowWaterTwoLayerEquations2D}","page":"Reference","title":"Trixi.initial_condition_convergence_test","text":"initial_condition_convergence_test(x, t, equations::ShallowWaterTwoLayerEquations2D)\n\nA smooth initial condition used for convergence tests in combination with source_terms_convergence_test. Constants must be set to rho_upper = 09, rho_lower = 10, g = 100.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.initial_condition_weak_blast_wave-Tuple{Any, Any, ShallowWaterEquations1D}","page":"Reference","title":"Trixi.initial_condition_weak_blast_wave","text":"initial_condition_weak_blast_wave(x, t, equations::ShallowWaterEquations1D)\n\nA weak blast wave discontinuity useful for testing, e.g., total energy conservation. Note for the shallow water equations to the total energy acts as a mathematical entropy function.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.initial_condition_weak_blast_wave-Tuple{Any, Any, ShallowWaterEquations2D}","page":"Reference","title":"Trixi.initial_condition_weak_blast_wave","text":"initial_condition_weak_blast_wave(x, t, equations::ShallowWaterEquations2D)\n\nA weak blast wave discontinuity useful for testing, e.g., total energy conservation. Note for the shallow water equations to the total energy acts as a mathematical entropy function.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.source_terms_convergence_test-Tuple{Any, Any, Any, ShallowWaterEquations2D}","page":"Reference","title":"Trixi.source_terms_convergence_test","text":"source_terms_convergence_test(u, x, t, equations::ShallowWaterEquations2D)\n\nSource terms used for convergence tests in combination with initial_condition_convergence_test (and Trixi.BoundaryConditionDirichlet in non-periodic domains).\n\nThis manufactured solution source term is specifically designed for the bottom topography function b(x,y) = 2 + 0.5 * sin(sqrt(2)*pi*x) + 0.5 * sin(sqrt(2)*pi*y) as defined in initial_condition_convergence_test.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.source_terms_convergence_test-Tuple{Any, Any, Any, ShallowWaterEquationsQuasi1D}","page":"Reference","title":"Trixi.source_terms_convergence_test","text":"source_terms_convergence_test(u, x, t, equations::ShallowWaterEquationsQuasi1D)\n\nSource terms used for convergence tests in combination with initial_condition_convergence_test (and BoundaryConditionDirichlet(initial_condition_convergence_test) in non-periodic domains).\n\nThis manufactured solution source term is specifically designed for the bottom topography function b(x) = 0.2 - 0.05 * sinpi(sqrt(2) * x[1]) and channel width 'a(x)= 1 + 0.1 * cospi(sqrt(2) * x[1])' as defined in initial_condition_convergence_test.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.source_terms_convergence_test-Tuple{Any, Any, Any, ShallowWaterMultiLayerEquations1D}","page":"Reference","title":"Trixi.source_terms_convergence_test","text":"source_terms_convergence_test(u, x, t, equations::ShallowWaterMultiLayerEquations1D)\n\nSource terms used for convergence tests with a three-layer configuration in combination with initial_condition_convergence_test (and Trixi.BoundaryConditionDirichlet in non-periodic domains).\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.source_terms_convergence_test-Tuple{Any, Any, Any, ShallowWaterMultiLayerEquations2D}","page":"Reference","title":"Trixi.source_terms_convergence_test","text":"source_terms_convergence_test(u, x, t, equations::ShallowWaterMultiLayerEquations2D)\n\nSource terms used for convergence tests with a three-layer configuration in combination with initial_condition_convergence_test (and Trixi.BoundaryConditionDirichlet in non-periodic domains).\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.source_terms_convergence_test-Tuple{Any, Any, Any, ShallowWaterTwoLayerEquations1D}","page":"Reference","title":"Trixi.source_terms_convergence_test","text":"source_terms_convergence_test(u, x, t, equations::ShallowWaterTwoLayerEquations1D)\n\nSource terms used for convergence tests in combination with initial_condition_convergence_test (and Trixi.BoundaryConditionDirichlet in non-periodic domains).\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.source_terms_convergence_test-Tuple{Any, Any, Any, ShallowWaterTwoLayerEquations2D}","page":"Reference","title":"Trixi.source_terms_convergence_test","text":"source_terms_convergence_test(u, x, t, equations::ShallowWaterTwoLayerEquations2D)\n\nSource terms used for convergence tests in combination with initial_condition_convergence_test.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.source_terms_convergence_test-Union{Tuple{S}, Tuple{T}, Tuple{Any, Any, Any, ShallowWaterExnerEquations1D{T, S, GrassModel{T}}}} where {T, S}","page":"Reference","title":"Trixi.source_terms_convergence_test","text":"source_terms_convergence_test(u, x, t, equations::ShallowWaterExnerEquations1D{T, S, GrassModel{T}}) where {T, S}\n\nSource terms used for convergence tests in combination with Trixi.initial_condition_convergence_test when using the the GrassModel model.\n\nTo use this source term the equations must be set to:\n\nequations = ShallowWaterExnerEquations1D(gravity = 10.0, rho_f = 0.5,\n                                            rho_s = 1.0, porosity = 0.5,\n                                            friction = ManningFriction(n = 0.0),\n                                            sediment_model = GrassModel(A_g = 0.01)\n\n\n\n\n\n","category":"method"},{"location":"reference/#Trixi.source_terms_convergence_test-Union{Tuple{S}, Tuple{T}, Tuple{Any, Any, Any, ShallowWaterExnerEquations1D{T, S, ShieldsStressModel{T}}}} where {T, S}","page":"Reference","title":"Trixi.source_terms_convergence_test","text":"source_terms_convergence_test(u, x, t, equations::ShallowWaterExnerEquations1D{T, S, ShieldsStressModel{T}}) where {T, S}\n\nSource terms used for convergence tests in combination with Trixi.initial_condition_convergence_test when using the MeyerPeterMueller model.\n\nTo use this source term the equations must be set to:\n\nequations = ShallowWaterExnerEquations1D(gravity = 10.0, rho_f = 0.5,\n                                         rho_s = 1.0, porosity = 0.5,\n                                         friction = ManningFriction(n = 0.01),\n                                         sediment_model = MeyerPeterMueller(theta_c = 0.0,\n                                                                            d_s = 1e-3))\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.MeyerPeterMueller-Tuple{}","page":"Reference","title":"TrixiShallowWater.MeyerPeterMueller","text":"MeyerPeterMueller(; theta_c, d_s)\n\nCreates a Meyer-Peter-Mueller model to compute the sediment discharge q_s with the critical Shields stress theta_c and the grain diameter d_s.\n\nAn overview of different formulations to compute the sediment discharge can be found in:\n\nM.J. Castro Díaz, E.D. Fernández-Nieto, A.M. Ferreiro (2008)\nSediment transport models in Shallow Water equations and numerical approach by high order finite volume methods\nDOI:10.1016/j.compfluid.2007.07.017\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.calc_wavespeed_roe-Tuple{Any, Any, Integer, ShallowWaterEquations1D}","page":"Reference","title":"TrixiShallowWater.calc_wavespeed_roe","text":"calc_wavespeed_roe(u_ll, u_rr, direction::Integer,\n                   equations::ShallowWaterEquations1D)\n\nCalculate Roe-averaged velocity v_roe and wavespeed c_roe = sqrt{g * h_roe} See for instance equation (62) in\n\nPaul A. Ullrich, Christiane Jablonowski, and Bram van Leer (2010) High-order finite-volume methods for the shallow-water equations on the sphere DOI: 10.1016/j.jcp.2010.04.044\n\nOr equation (9.17) in this lecture notes.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.calc_wavespeed_roe-Tuple{Any, Any, Integer, ShallowWaterEquations2D}","page":"Reference","title":"TrixiShallowWater.calc_wavespeed_roe","text":"calc_wavespeed_roe(u_ll, u_rr, direction::Integer,\n                   equations::ShallowWaterEquations2D)\n\nCalculate Roe-averaged velocity v_roe and wavespeed c_roe = sqrt{g * h_roe} depending on direction. See for instance equation (62) in\n\nPaul A. Ullrich, Christiane Jablonowski, and Bram van Leer (2010) High-order finite-volume methods for the shallow-water equations on the sphere DOI: 10.1016/j.jcp.2010.04.044\n\nOr this slides, slides 8 and 9.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.dissipation_roe-Tuple{Any, Any, AbstractVector, ShallowWaterEquations2D}","page":"Reference","title":"TrixiShallowWater.dissipation_roe","text":"dissipation_roe(u_ll, u_rr, orientation_or_normal_direction,\n                                equations::ShallowWaterEquations2D)\n\nRoe-type dissipation term for the ShallowWaterEquations2D. To create the classical Roe solver, this dissipation term can be combined with Trixi.flux_central using Trixi.FluxPlusDissipation.\n\nFor details on the Roe linearization see Chapter 15.3.2 and Chapter 21.7 for the two-dimensional shallow water equations of the book:\n\nRandall J. LeVeque (2002) Finite Volume Methods for Hyperbolic Problems DOI: 10.1017/CBO9780511791253\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.dissipation_roe-Tuple{Any, Any, Any, ShallowWaterEquations1D}","page":"Reference","title":"TrixiShallowWater.dissipation_roe","text":"dissipation_roe(u_ll, u_rr, orientation_or_normal_direction,\n                                equations::ShallowWaterEquations1D)\n\nRoe-type dissipation term for the ShallowWaterEquations1D. To create the classical Roe solver, this dissipation term can be combined with Trixi.flux_central using Trixi.FluxPlusDissipation.\n\nFor details on the Roe linearization see Chapter 15.3.2 and Chapter 15.3.3 for the one-dimensional shallow water equations of the book:\n\nRandall J. LeVeque (2002) Finite Volume Methods for Hyperbolic Problems DOI: 10.1017/CBO9780511791253\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.dissipation_roe-Tuple{Any, Any, Any, ShallowWaterExnerEquations1D}","page":"Reference","title":"TrixiShallowWater.dissipation_roe","text":"dissipation_roe(u_ll, u_rr, orientation_or_normal_direction,\n                                equations::ShallowWaterExnerEquations1D)\n\nRoe-type dissipation term for the ShallowWaterExnerEquations1D with an approximate Roe average for the sediment discharge q_s.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.eachlayer-Tuple{TrixiShallowWater.AbstractShallowWaterMultiLayerEquations}","page":"Reference","title":"TrixiShallowWater.eachlayer","text":"eachlayer(equations::AbstractShallowWaterMultiLayerEquations)\n\nReturn an iterator over the indices that specify the location in relevant data structures for the layers in AbstractShallowWaterMultiLayerEquations.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.flux_ersing_etal-Tuple{Any, Any, Integer, ShallowWaterExnerEquations1D}","page":"Reference","title":"TrixiShallowWater.flux_ersing_etal","text":"flux_ersing_etal(u_ll, u_rr, orientation::Integer,\n                                 equations::ShallowWaterMultiLayerEquations1D)\n\nEntropy conservative split form, without the hydrostatic pressure. This flux should be used together with the nonconservative flux_nonconservative_ersing_etal to create a scheme that is entropy conservative and well-balanced.\n\nTo obtain an entropy stable formulation the surface_flux can be set as FluxPlusDissipation(flux_ersing_etal, DissipationLocalLaxFriedrichs()), flux_nonconservative_ersing_etal.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.flux_ersing_etal-Tuple{Any, Any, Integer, ShallowWaterMultiLayerEquations1D}","page":"Reference","title":"TrixiShallowWater.flux_ersing_etal","text":"flux_ersing_etal(u_ll, u_rr, orientation::Integer,\n                                 equations::ShallowWaterMultiLayerEquations1D)\n\nTotal energy conservative (mathematical entropy for MLSWE) split form, without the hydrostatic pressure. When the bottom topography is nonzero this scheme will be well-balanced when used with the  nonconservative flux_nonconservative_ersing_etal.\n\nTo obtain an entropy stable formulation the surface_flux can be set as FluxPlusDissipation(flux_ersing_etal, DissipationLocalLaxFriedrichs()), flux_nonconservative_ersing_etal.\n\nIn the two-layer setting this combination is equivalent to the fluxes in:\n\nPatrick Ersing, Andrew R. Winters (2023) An entropy stable discontinuous Galerkin method for the two-layer shallow water equations on  curvilinear meshes DOI: 10.1007/s10915-024-02451-2\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.flux_ersing_etal-Tuple{Any, Any, Integer, ShallowWaterMultiLayerEquations2D}","page":"Reference","title":"TrixiShallowWater.flux_ersing_etal","text":"flux_ersing_etal(u_ll, u_rr, orientation::Integer,\n                                 equations::ShallowWaterMultiLayerEquations2D)\nflux_ersing_etal(u_ll, u_rr, normal_direction::AbstractVector,\n                                 equations::ShallowWaterMultiLayerEquations2D)\n\nTotal energy conservative (mathematical entropy for MLSWE) split form, without the hydrostatic pressure. When the bottom topography is nonzero this scheme will be well-balanced when used with the nonconservative flux_nonconservative_ersing_etal.\n\nTo obtain an entropy stable formulation the surface_flux can be set as FluxPlusDissipation(flux_ersing_etal, DissipationLocalLaxFriedrichs()), flux_nonconservative_ersing_etal.\n\nIn the two-layer setting this combination is equivalent to the fluxes in:\n\nPatrick Ersing, Andrew R. Winters (2023) An entropy stable discontinuous Galerkin method for the two-layer shallow water equations on curvilinear meshes DOI: 10.1007/s10915-024-02451-2\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.flux_es_ersing_etal-Tuple{Any, Any, Any, ShallowWaterTwoLayerEquations2D}","page":"Reference","title":"TrixiShallowWater.flux_es_ersing_etal","text":"flux_es_ersing_etal(u_ll, u_rr, orientation_or_normal_direction,\n                    equations::ShallowWaterTwoLayerEquations2D)\n\nEntropy stable surface flux for the two-layer shallow water equations. Uses the entropy conservative  flux_wintermeyer_etal and adds a Lax-Friedrichs type dissipation dependent on the jump of  entropy variables. \n\nFor further details see:\n\nPatrick Ersing, Andrew R. Winters (2023) An entropy stable discontinuous Galerkin method for the two-layer shallow water equations on  curvilinear meshes DOI: 10.1007/s10915-024-02451-2\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.flux_es_ersing_etal-Tuple{Any, Any, Integer, ShallowWaterTwoLayerEquations1D}","page":"Reference","title":"TrixiShallowWater.flux_es_ersing_etal","text":"flux_es_ersing_etal(u_ll, u_rr, orientation_or_normal_direction,\n                    equations::ShallowWaterTwoLayerEquations1D)\n\nEntropy stable surface flux for the two-layer shallow water equations. Uses the entropy conservative  flux_wintermeyer_etal and adds a Lax-Friedrichs type dissipation dependent on the jump of  entropy variables. \n\nFor further details see:\n\nPatrick Ersing, Andrew R. Winters (2023) An entropy stable discontinuous Galerkin method for the two-layer shallow water equations on  curvilinear meshes DOI: 10.1007/s10915-024-02451-2\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.flux_nonconservative_audusse_etal-Tuple{Any, Any, Integer, ShallowWaterEquations1D}","page":"Reference","title":"TrixiShallowWater.flux_nonconservative_audusse_etal","text":"flux_nonconservative_audusse_etal(u_ll, u_rr, orientation::Integer,\n                                  equations::ShallowWaterEquations1D)\n\nNon-symmetric two-point surface flux that discretizes the nonconservative (source) term. The discretization uses the hydrostatic_reconstruction_audusse_etal on the conservative variables.\n\nThis hydrostatic reconstruction ensures that the finite volume numerical fluxes remain well-balanced for discontinuous bottom topographies ShallowWaterEquations1D. Should be used together with FluxHydrostaticReconstruction and hydrostatic_reconstruction_audusse_etal in the surface flux to ensure consistency.\n\nFurther details on the hydrostatic reconstruction and its motivation can be found in\n\nEmmanuel Audusse, François Bouchut, Marie-Odile Bristeau, Rupert Klein, and Benoit Perthame (2004) A fast and stable well-balanced scheme with hydrostatic reconstruction for shallow water flows DOI: 10.1137/S1064827503431090\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.flux_nonconservative_audusse_etal-Tuple{Any, Any, Integer, ShallowWaterEquations2D}","page":"Reference","title":"TrixiShallowWater.flux_nonconservative_audusse_etal","text":"flux_nonconservative_audusse_etal(u_ll, u_rr, orientation::Integer,\n                                  equations::ShallowWaterEquations2D)\nflux_nonconservative_audusse_etal(u_ll, u_rr,\n                                  normal_direction::AbstractVector,\n                                  equations::ShallowWaterEquations2D)\n\nNon-symmetric two-point surface flux that discretizes the nonconservative (source) term. The discretization uses the hydrostatic_reconstruction_audusse_etal on the conservative variables.\n\nThis hydrostatic reconstruction ensures that the finite volume numerical fluxes remain well-balanced for discontinuous bottom topographies ShallowWaterEquations2D. Should be used together with FluxHydrostaticReconstruction and hydrostatic_reconstruction_audusse_etal in the surface flux to ensure consistency.\n\nFurther details for the hydrostatic reconstruction and its motivation can be found in\n\nEmmanuel Audusse, François Bouchut, Marie-Odile Bristeau, Rupert Klein, and Benoit Perthame (2004) A fast and stable well-balanced scheme with hydrostatic reconstruction for shallow water flows DOI: 10.1137/S1064827503431090\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.flux_nonconservative_chen_noelle-Tuple{Any, Any, Integer, ShallowWaterEquations1D}","page":"Reference","title":"TrixiShallowWater.flux_nonconservative_chen_noelle","text":"flux_nonconservative_chen_noelle(u_ll, u_rr,\n                                 orientation::Integer,\n                                 equations::ShallowWaterEquations1D)\n\nNon-symmetric two-point surface flux that discretizes the nonconservative (source) term. The discretization uses the hydrostatic_reconstruction_chen_noelle on the conservative variables.\n\nShould be used together with FluxHydrostaticReconstruction and hydrostatic_reconstruction_chen_noelle in the surface flux to ensure consistency.\n\nFurther details on the hydrostatic reconstruction and its motivation can be found in\n\nGuoxian Chen and Sebastian Noelle (2017) A new hydrostatic reconstruction scheme based on subcell reconstructions DOI:10.1137/15M1053074\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.flux_nonconservative_chen_noelle-Tuple{Any, Any, Integer, ShallowWaterEquations2D}","page":"Reference","title":"TrixiShallowWater.flux_nonconservative_chen_noelle","text":"flux_nonconservative_chen_noelle(u_ll, u_rr,\n                                 orientation::Integer,\n                                 equations::ShallowWaterEquations2D)\nflux_nonconservative_chen_noelle(u_ll, u_rr,\n                                 normal_direction::AbstractVector,\n                                 equations::ShallowWaterEquations2D)\n\nNon-symmetric two-point surface flux that discretizes the nonconservative (source) term. The discretization uses the hydrostatic_reconstruction_chen_noelle on the conservative variables.\n\nShould be used together with FluxHydrostaticReconstruction and hydrostatic_reconstruction_chen_noelle in the surface flux to ensure consistency.\n\nFurther details on the hydrostatic reconstruction and its motivation can be found in\n\nGuoxian Chen and Sebastian Noelle (2017) A new hydrostatic reconstruction scheme based on subcell reconstructions DOI:10.1137/15M1053074\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.flux_nonconservative_ersing_etal-Tuple{Any, Any, Integer, ShallowWaterExnerEquations1D}","page":"Reference","title":"TrixiShallowWater.flux_nonconservative_ersing_etal","text":"flux_nonconservative_ersing_etal(u_ll, u_rr, orientation, equations::ShallowWaterExnerEquations1D)\n\nNon-symmetric path-conservative two-point flux discretizing the nonconservative terms of the ShallowWaterExnerEquations1D which consists of the hydrostatic pressure of the fluid layer and an additional pressure contribution from the sediment layer to obtain an entropy inequality.\n\nThis non-conservative flux should be used together with flux_ersing_etal to create a scheme that is entropy conservative and well-balanced.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.flux_nonconservative_ersing_etal-Tuple{Any, Any, Integer, ShallowWaterMultiLayerEquations1D}","page":"Reference","title":"TrixiShallowWater.flux_nonconservative_ersing_etal","text":"flux_nonconservative_ersing_etal(u_ll, u_rr, orientation::Integer,\n                                 equations::ShallowWaterTwoLayerEquations1D)\n\nNon-symmetric path-conservative two-point flux discretizing the nonconservative (source) term that contains the gradients of the bottom topography and waterheights from the coupling between layers and the nonconservative pressure formulation ShallowWaterMultiLayerEquations1D.\n\nWhen the bottom topography is nonzero this scheme will be well-balanced when used with flux_ersing_etal.\n\nIn the two-layer setting this combination is equivalent to the fluxes in:\n\nPatrick Ersing, Andrew R. Winters (2023) An entropy stable discontinuous Galerkin method for the two-layer shallow water equations on  curvilinear meshes DOI: 10.1007/s10915-024-02451-2\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.flux_nonconservative_ersing_etal-Tuple{Any, Any, Integer, ShallowWaterMultiLayerEquations2D}","page":"Reference","title":"TrixiShallowWater.flux_nonconservative_ersing_etal","text":"flux_nonconservative_ersing_etal(u_ll, u_rr, orientation::Integer,\n                                 equations::ShallowWaterMultiLayerEquations2D)\nflux_nonconservative_ersing_etal(u_ll, u_rr,\n                                 normal_direction::AbstractVector,\n                                 equations::ShallowWaterMultiLayerEquations2D)\n\nNon-symmetric path-conservative two-point flux discretizing the nonconservative (source) term that contains the gradients of the bottom topography and waterheights from the coupling between layers and the nonconservative pressure formulation ShallowWaterMultiLayerEquations2D.\n\nWhen the bottom topography is nonzero this scheme will be well-balanced when used with flux_ersing_etal.\n\nIn the two-layer setting this combination is equivalent to the fluxes in:\n\nPatrick Ersing, Andrew R. Winters (2023) An entropy stable discontinuous Galerkin method for the two-layer shallow water equations on curvilinear meshes DOI: 10.1007/s10915-024-02451-2\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.flux_nonconservative_ersing_etal-Tuple{Any, Any, Integer, ShallowWaterTwoLayerEquations1D}","page":"Reference","title":"TrixiShallowWater.flux_nonconservative_ersing_etal","text":"flux_nonconservative_ersing_etal(u_ll, u_rr, orientation::Integer,\n                                 equations::ShallowWaterTwoLayerEquations1D)\n\nNon-symmetric path-conservative two-point volume flux discretizing the nonconservative (source) term that contains the gradient of the bottom topography ShallowWaterTwoLayerEquations1D and an additional term that couples the momentum of both layers. \n\nThis is a modified version of flux_nonconservative_wintermeyer_etal that gives entropy  conservation and well-balancedness in both the volume and surface when combined with  flux_wintermeyer_etal. \n\nFor further details see:\n\nPatrick Ersing, Andrew R. Winters (2023) An entropy stable discontinuous Galerkin method for the two-layer shallow water equations on  curvilinear meshes DOI: 10.1007/s10915-024-02451-2\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.flux_nonconservative_ersing_etal-Tuple{Any, Any, Integer, ShallowWaterTwoLayerEquations2D}","page":"Reference","title":"TrixiShallowWater.flux_nonconservative_ersing_etal","text":"flux_nonconservative_ersing_etal(u_ll, u_rr, orientation::Integer,\n                                 equations::ShallowWaterTwoLayerEquations2D)\nflux_nonconservative_ersing_etal(u_ll, u_rr,\n                                 normal_direction::AbstractVector,\n                                 equations::ShallowWaterTwoLayerEquations2D)\n\nNon-symmetric path-conservative two-point volume flux discretizing the nonconservative (source) term that contains the gradient of the bottom topography ShallowWaterTwoLayerEquations2D and an additional term that couples the momentum of both layers. \n\nThis is a modified version of flux_nonconservative_wintermeyer_etal that gives entropy  conservation and well-balancedness in both the volume and surface when combined with  flux_wintermeyer_etal.\n\nFor further details see:\n\nPatrick Ersing, Andrew R. Winters (2023) An entropy stable discontinuous Galerkin method for the two-layer shallow water equations on  curvilinear meshes DOI: 10.1007/s10915-024-02451-2\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.hydrostatic_reconstruction_audusse_etal-Tuple{Any, Any, ShallowWaterEquations1D}","page":"Reference","title":"TrixiShallowWater.hydrostatic_reconstruction_audusse_etal","text":"hydrostatic_reconstruction_audusse_etal(u_ll, u_rr, orientation::Integer,\n                                        equations::ShallowWaterEquations1D)\n\nA particular type of hydrostatic reconstruction on the water height to guarantee well-balancedness for a general bottom topography ShallowWaterEquations1D. The reconstructed solution states u_ll_star and u_rr_star variables are then used to evaluate the surface numerical flux at the interface. Use in combination with the generic numerical flux routine FluxHydrostaticReconstruction.\n\nFurther details on this hydrostatic reconstruction and its motivation can be found in\n\nEmmanuel Audusse, François Bouchut, Marie-Odile Bristeau, Rupert Klein, and Benoit Perthame (2004) A fast and stable well-balanced scheme with hydrostatic reconstruction for shallow water flows DOI: 10.1137/S1064827503431090\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.hydrostatic_reconstruction_audusse_etal-Tuple{Any, Any, ShallowWaterEquations2D}","page":"Reference","title":"TrixiShallowWater.hydrostatic_reconstruction_audusse_etal","text":"hydrostatic_reconstruction_audusse_etal(u_ll, u_rr, orientation_or_normal_direction,\n                                        equations::ShallowWaterEquations2D)\n\nA particular type of hydrostatic reconstruction on the water height to guarantee well-balancedness for a general bottom topography ShallowWaterEquations2D. The reconstructed solution states u_ll_star and u_rr_star variables are used to evaluate the surface numerical flux at the interface. Use in combination with the generic numerical flux routine FluxHydrostaticReconstruction.\n\nFurther details for the hydrostatic reconstruction and its motivation can be found in\n\nEmmanuel Audusse, François Bouchut, Marie-Odile Bristeau, Rupert Klein, and Benoit Perthame (2004) A fast and stable well-balanced scheme with hydrostatic reconstruction for shallow water flows DOI: 10.1137/S1064827503431090\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.hydrostatic_reconstruction_chen_noelle-Tuple{Any, Any, ShallowWaterEquations1D}","page":"Reference","title":"TrixiShallowWater.hydrostatic_reconstruction_chen_noelle","text":"hydrostatic_reconstruction_chen_noelle(u_ll, u_rr, orientation::Integer,\n                                       equations::ShallowWaterEquations1D)\n\nA particular type of hydrostatic reconstruction of the water height to guarantee well-balancedness for a general bottom topography of the ShallowWaterEquations1D. The reconstructed solution states u_ll_star and u_rr_star variables are used to evaluate the surface numerical flux at the interface. The key idea is a linear reconstruction of the bottom and water height at the interfaces using subcells. Use in combination with the generic numerical flux routine FluxHydrostaticReconstruction.\n\nFurther details on this hydrostatic reconstruction and its motivation can be found in\n\nGuoxian Chen and Sebastian Noelle (2017) A new hydrostatic reconstruction scheme based on subcell reconstructions DOI:10.1137/15M1053074\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.hydrostatic_reconstruction_chen_noelle-Tuple{Any, Any, ShallowWaterEquations2D}","page":"Reference","title":"TrixiShallowWater.hydrostatic_reconstruction_chen_noelle","text":"hydrostatic_reconstruction_chen_noelle(u_ll, u_rr, orientation::Integer,\n                                       equations::ShallowWaterEquations2D)\n\nA particular type of hydrostatic reconstruction of the water height to guarantee well-balancedness for a general bottom topography of the ShallowWaterEquations2D. The reconstructed solution states u_ll_star and u_rr_star variables are then used to evaluate the surface numerical flux at the interface. The key idea is a linear reconstruction of the bottom and water height at the interfaces using subcells. Use in combination with the generic numerical flux routine FluxHydrostaticReconstruction.\n\nFurther details on this hydrostatic reconstruction and its motivation can be found in\n\nGuoxian Chen and Sebastian Noelle (2017) A new hydrostatic reconstruction scheme based on subcell reconstructions DOI:10.1137/15M1053074\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.hydrostatic_reconstruction_ersing_etal-Tuple{Any, Any, ShallowWaterMultiLayerEquations1D}","page":"Reference","title":"TrixiShallowWater.hydrostatic_reconstruction_ersing_etal","text":"hydrostatic_reconstruction_ersing_etal(u_ll, u_rr, equations::ShallowWaterMultiLayerEquations1D)\n\nA particular hydrostatic reconstruction of the water height and bottom topography to  guarantee well-balancedness in the presence of wet/dry transitions and entropy stability for the  ShallowWaterMultiLayerEquations1D.  The reconstructed solution states u_ll_star and u_rr_star are used to evaluate the  surface numerical flux at the interface. The key idea is a piecewise linear reconstruction of the  bottom topography and water height interfaces using subcells, where the bottom topography is allowed  to be discontinuous.  Use in combination with the generic numerical flux routine FluxHydrostaticReconstruction.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.hydrostatic_reconstruction_ersing_etal-Tuple{Any, Any, ShallowWaterMultiLayerEquations2D}","page":"Reference","title":"TrixiShallowWater.hydrostatic_reconstruction_ersing_etal","text":"hydrostatic_reconstruction_ersing_etal(u_ll, u_rr, equations::ShallowWaterMultiLayerEquations2D)\n\nA particular type of hydrostatic reconstruction of the water height and bottom topography to guarantee well-balancedness in the presence of wet/dry transitions and entropy stability for the ShallowWaterMultiLayerEquations2D. The reconstructed solution states u_ll_star and u_rr_star variables are used to evaluate the surface numerical flux at the interface. The key idea is a piecewise linear reconstruction of the bottom topography and water height interfaces using subcells, where the bottom topography is allowed to be discontinuous. Use in combination with the generic numerical flux routine FluxHydrostaticReconstruction.\n\nPatrick Ersing, Sven Goldberg, and Andrew R. Winters (2025) Entropy stable hydrostatic reconstruction schemes for shallow water systems DOI: 10.1016/j.jcp.2025.113802\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.min_max_speed_chen_noelle-Tuple{Any, Any, Integer, ShallowWaterEquations1D}","page":"Reference","title":"TrixiShallowWater.min_max_speed_chen_noelle","text":"min_max_speed_chen_noelle(u_ll, u_rr, orientation::Integer,\n                          equations::ShallowWaterEquations1D)\n\nThe approximated speeds for the HLL type numerical flux used by Chen and Noelle for their hydrostatic reconstruction. As they state in the paper, these speeds are chosen for the numerical flux to ensure positivity and to satisfy an entropy inequality.\n\nFurther details on this hydrostatic reconstruction and its motivation can be found in\n\nGuoxian Chen and Sebastian Noelle (2017) A new hydrostatic reconstruction scheme based on subcell reconstructions DOI:10.1137/15M1053074\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.min_max_speed_chen_noelle-Tuple{Any, Any, Integer, ShallowWaterEquations2D}","page":"Reference","title":"TrixiShallowWater.min_max_speed_chen_noelle","text":"min_max_speed_chen_noelle(u_ll, u_rr, orientation::Integer,\n                          equations::ShallowWaterEquations2D)\nmin_max_speed_chen_noelle(u_ll, u_rr, normal_direction::AbstractVector,\n                          equations::ShallowWaterEquations2D)\n\nSpecial estimate of the minimal and maximal wave speed of the shallow water equations for the left and right states u_ll, u_rr. These approximate speeds are used for the HLL-type numerical flux flux_hll_chen_noelle. These wave speed estimates together with a particular hydrostatic reconstruction technique guarantee that the numerical flux is positive and satisfies an entropy inequality.\n\nFurther details on this hydrostatic reconstruction and its motivation can be found in the reference below. The definition of the wave speeds are given in Equation (2.20).\n\nGuoxian Chen and Sebastian Noelle (2017) A new hydrostatic reconstruction scheme based on subcell reconstructions DOI:10.1137/15M1053074\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.nlayers-Union{Tuple{TrixiShallowWater.AbstractShallowWaterMultiLayerEquations{NDIMS, NVARS, NLAYERS}}, Tuple{NLAYERS}, Tuple{NVARS}, Tuple{NDIMS}} where {NDIMS, NVARS, NLAYERS}","page":"Reference","title":"TrixiShallowWater.nlayers","text":"nlayers(equations::AbstractShallowWaterMultiLayerEquations)\n\nRetrieve the number of layers from an equation instance of the AbstractShallowWaterMultiLayerEquations.\n\n\n\n\n\n","category":"method"},{"location":"reference/#TrixiShallowWater.source_term_bottom_friction-Tuple{Any, Any, Any, ShallowWaterExnerEquations1D}","page":"Reference","title":"TrixiShallowWater.source_term_bottom_friction","text":"source_term_bottom_friction(u, x, t, equations::ShallowWaterExnerEquations1D)\n\nSource term that accounts for the bottom friction in the ShallowWaterExnerEquations1D. The actual friction law is determined through the friction model in equations.friction.\n\n\n\n\n\n","category":"method"},{"location":"tutorials/introduction/#Tutorials","page":"Introduction","title":"Tutorials","text":"","category":"section"},{"location":"tutorials/introduction/","page":"Introduction","title":"Introduction","text":"The tutorials on these pages will guide you through solving shallow water equations using TrixiShallowWater.jl. ","category":"page"},{"location":"tutorials/introduction/#Prerequisites:-Trixi.jl-Tutorials","page":"Introduction","title":"Prerequisites: Trixi.jl Tutorials","text":"","category":"section"},{"location":"tutorials/introduction/","page":"Introduction","title":"Introduction","text":"Before diving into the TrixiShallowWater.jl specific tutorials, we recommend familiarizing yourself with  the core concepts of Trixi.jl by reading through the Trixi.jl documentation and first complete the following Trixi.jl tutorials below:","category":"page"},{"location":"tutorials/introduction/","page":"Introduction","title":"Introduction","text":"First steps in Trixi.jl\nIntroduction to DG Methods\nDGSEM with flux differencing\nShock capturing with flux differencing and stage limiter\nNon-periodic boundaries\nExplicit time stepping","category":"page"},{"location":"tutorials/introduction/#TrixiShallowWater.jl-Tutorials","page":"Introduction","title":"TrixiShallowWater.jl Tutorials","text":"","category":"section"},{"location":"tutorials/introduction/","page":"Introduction","title":"Introduction","text":"Once you're comfortable with Trixi.jl, you can start exploring the TrixiShallowWater tutorials.  These tutorials focus on solving shallow water equations, including wetting and drying scenarios,  using the features from TrixiShallowWater.jl. Each tutorial is designed to be self-contained and includes:","category":"page"},{"location":"tutorials/introduction/","page":"Introduction","title":"Introduction","text":"A detailed explanation of the problem setup.\nStep-by-step instructions for configuring and running the simulation.\nVisualization and analysis of the results.","category":"page"},{"location":"tutorials/introduction/#Available-Tutorials","page":"Introduction","title":"Available Tutorials","text":"","category":"section"},{"location":"tutorials/introduction/","page":"Introduction","title":"Introduction","text":"Dam Break over Triangular Bottom Topography:  Simulate a dam break scenario with triangular bottom topography, including wetting and drying effects.\nOkushiri Tsunami:   Learn how to generate a mesh file from real bathymetry data to replicate the Okushiri tsunami experiment  and visualize the results with Paraview.","category":"page"},{"location":"tutorials/introduction/#Getting-Help","page":"Introduction","title":"Getting Help","text":"","category":"section"},{"location":"tutorials/introduction/","page":"Introduction","title":"Introduction","text":"If you encounter any issues or have questions while working through the tutorials, feel free to:","category":"page"},{"location":"tutorials/introduction/","page":"Introduction","title":"Introduction","text":"Check the Trixi.jl documentation.\nOpen an issue on the TrixiShallowWater.jl GitHub repository.","category":"page"},{"location":"license/#License","page":"License","title":"License","text":"","category":"section"},{"location":"license/","page":"License","title":"License","text":"MIT LicenseCopyright (c) 2020-present The TrixiShallowWater.jl Authors (see Authors)Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","category":"page"},{"location":"styleguide/#Style-guide","page":"Style guide","title":"Style guide","text":"","category":"section"},{"location":"styleguide/","page":"Style guide","title":"Style guide","text":"Coding style is an inherently personal - and thus hotly contested - issue. Since code is usually \"written once, read often\", it helps regular developers, new users, and reviewers if code is formatted consistently. We therefore believe in the merit of using a common coding style throughout TrixiShallowWater.jl, even at the expense that not everyone can be happy with every detailed style decision. If you came here because you are furious about our code formatting rules, here is a happy little whale for you to calm you down: 🐳","category":"page"},{"location":"styleguide/#Conventions","page":"Style guide","title":"Conventions","text":"","category":"section"},{"location":"styleguide/","page":"Style guide","title":"Style guide","text":"The following lists a few coding conventions for TrixiShallowWater.jl. Note that in addition to these conventions, we apply and enforce automated source code formatting (see below for more details):","category":"page"},{"location":"styleguide/","page":"Style guide","title":"Style guide","text":"Modules, types, structs with CamelCase.\nFunctions, variables with lowercase snake_case.\nIndentation with 4 spaces (never tabs!)\nMaximum line length (strictly): 92.\nFunctions that mutate their input are named with a trailing !.\nFunctions order their parameters similar to Julia Base.\nThe main modified argument comes first. For example, if the right-hand side du is modified, it should come first. If only the cache is modified, e.g., in prolong2interfaces! and its siblings, put the cache first.\nOtherwise, use the order mesh, equations, solver, cache.\nIf something needs to be specified in more detail for dispatch, put the additional argument before the general one that is specified in more detail. For example, we use have_nonconservative_terms(equations), equations and dg.mortar, dg.\nPrefer for i in ... to for i = ... for better semantic clarity and greater flexibility.\nExecutable code should only use ASCII characters.\nDocstrings and comments can and should use Unicode characters where it helps understanding.\nMultiline expressions should be explicitly grouped by parentheses and not rely on Julia's implicit line continuation syntax.\nWhen naming multiple functions of a single or similar category, prefer to put the general classification first and the specialization second. Example: Use flux_central instead of central_flux. This helps when searching for available functions on the REPL (e.g., when trying to find all flux functions).","category":"page"},{"location":"styleguide/#automated-source-code-formatting","page":"Style guide","title":"Automated source code formatting","text":"","category":"section"},{"location":"styleguide/","page":"Style guide","title":"Style guide","text":"We use JuliaFormatter.jl to format the source code of TrixiShallowWater.jl, which will also enforce some of the Conventions listed above (e.g., line length or indentation with 4 spaces are automatically handled, while capitalization of names is not). Our format is mostly based on the SciML-style formatting rules. For more details you can have a look at the current .JuliaFormatter.toml file that holds the configuration options we use for JuliaFormatter.jl.","category":"page"},{"location":"styleguide/","page":"Style guide","title":"Style guide","text":"Note that we expect all contributions to TrixiShallowWater.jl to be formatted with JuliaFormatter.jl before being merged to the main branch. We ensure this by running a automated check on all PRs that verify that running JuliaFormatter.jl again will not change the source code.","category":"page"},{"location":"styleguide/","page":"Style guide","title":"Style guide","text":"To format your contributions before created a PR (or, at least, before requesting a review of your PR), you need to install JuliaFormatter.jl first by running","category":"page"},{"location":"styleguide/","page":"Style guide","title":"Style guide","text":"julia -e 'using Pkg; Pkg.add(PackageSpec(name = \"JuliaFormatter\", version=\"1.0.60\"))'","category":"page"},{"location":"styleguide/","page":"Style guide","title":"Style guide","text":"You can then recursively format the core Julia files in the TrixiShallowWater.jl repo by executing","category":"page"},{"location":"styleguide/","page":"Style guide","title":"Style guide","text":"julia -e 'using JuliaFormatter; format(\".\")'","category":"page"},{"location":"styleguide/","page":"Style guide","title":"Style guide","text":"from inside the TrixiShallowWater.jl repository. For convenience, there is also a script you can directly run from your terminal shell, which will automatically install JuliaFormatter in a temporary environment and then run it:","category":"page"},{"location":"styleguide/","page":"Style guide","title":"Style guide","text":"utils/trixisw-format.jl","category":"page"},{"location":"styleguide/","page":"Style guide","title":"Style guide","text":"You can get more information about using the convenience script by running it with the --help/-h flag. There is an additional script to format individual files that can be run from the terminal shell","category":"page"},{"location":"styleguide/","page":"Style guide","title":"Style guide","text":"utils/trixisw-format-file.jl path/to/file.jl","category":"page"},{"location":"styleguide/#Checking-formatting-before-committing","page":"Style guide","title":"Checking formatting before committing","text":"","category":"section"},{"location":"styleguide/","page":"Style guide","title":"Style guide","text":"It can be convenient to check the formatting of source code automatically before each commit. We use git-hooks for it and provide a pre-commit script in the utils folder. The script uses JuliaFormatter.jl just like formatting script that runs over the whole TrixiShallowWater.jl directory. You can copy the pre-commit-script into .git/hooks/pre-commit and it will check your formatting before each commit. If errors are found the commit is aborted and you can add the corrections via","category":"page"},{"location":"styleguide/","page":"Style guide","title":"Style guide","text":"git add -p","category":"page"},{"location":"#TrixiShallowWater.jl","page":"Home","title":"TrixiShallowWater.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Stable) (Image: Dev) (Image: Slack) (Image: Build Status) (Image: Coverage) (Image: Coverage) (Image: License: MIT)","category":"page"},{"location":"","page":"Home","title":"Home","text":"<p align=\"center\">\n  <img width=\"300px\" src=\"https://trixi-framework.github.io/assets/logo_sw.png\">\n</p>","category":"page"},{"location":"","page":"Home","title":"Home","text":"TrixiShallowWater.jl is a numerical simulation package focused on solving shallow water equations with the discontinuous Galerkin method and written in Julia. The package builds on the numerical simulation framework for conservation laws Trixi.jl and provides several specialized models and features specific for shallow water applications. Below is a short summary of the available features:","category":"page"},{"location":"","page":"Home","title":"Home","text":"1D and 2D simulations on line/quad meshes\nCartesian and curvilinear meshes\nConforming and non-conforming meshes\nHierarchical quadtree meshes with adaptive mesh refinement\nHigh-order accuracy in space and time\nEntropy-stable discontinuous Galerkin methods based on flux differencing\nEntropy-stable shock capturing\nPositivity-preserving limiting\nCompatible with the SciML ecosystem for ordinary differential equations\nCFL-based and error-based time step control\nShallow water capabilities\nWetting and drying\nMulti-layer flows\nSediment transport via an Exner model","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you have not yet installed Julia, please follow the instructions for your operating system. TrixiShallowWater.jl works with Julia v1.10 and newer. We recommend using the latest stable release of Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"TrixiShallowWater.jl is not a registered Julia package, and therefore needs to be downloaded manually and then run from within the cloned directory:","category":"page"},{"location":"","page":"Home","title":"Home","text":"git clone https://github.com/trixi-framework/TrixiShallowWater.jl.git\njulia --project=@.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In addition TrixiShallowWater.jl requires the numerical solver framework Trixi.jl, relevant sub-packages of OrdinaryDiffEq.jl for time integration, and Plots.jl for visualization, which can be installed by executing the following in the Julia REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\n\njulia> Pkg.add([\"Trixi\", \"Trixi2Vtk\", \"OrdinaryDiffEqLowStorageRK\", \"OrdinaryDiffEqSSPRK\", \"Plots\"])","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TrixiShallowWater.jl is maintained by the Trixi authors. Its principal developers are Andrew Winters (Linköping University, Sweden) and Patrick Ersing (Linköping University, Sweden). The full list of contributors can be found in Authors.","category":"page"},{"location":"#License-and-contributing","page":"Home","title":"License and contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TrixiShallowWater.jl is licensed under the MIT license (see License). Since TrixiShallowWater.jl is an open-source project, we are very happy to accept contributions from the community. To get in touch with the developers, join us on Slack or create an issue.","category":"page"},{"location":"#Acknowledgments","page":"Home","title":"Acknowledgments","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<p align=\"center\" style=\"font-size:0;\"><!--\n  SRC      --><img align=\"middle\" src=\"https://github.com/trixi-framework/Trixi.jl/assets/3637659/48f9da06-6f7a-4586-b23e-739bee3901c0\" height=\"120\"><!--\n  -->\n</p>","category":"page"},{"location":"","page":"Home","title":"Home","text":"This project has benefited from funding from Vetenskapsrådet (VR, Swedish Research Council), Sweden through the VR Starting Grant \"Shallow water flows including sediment transport and morphodynamics\", VR grant agreement 2020-03642 VR.","category":"page"}]
}
